
#Область ПрограммныйИнтерфейс

Процедура ВыполнитьДлительнуюОперациюИсправлениеФайлов(СтруктураПараметров, АдресРезультата) Экспорт
	
	Если СтруктураПараметров.ИсправлятьКодНеиспользуемыхМодулей Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ИспользуетсяВСистеме", Ложь);
		НеиспользуемыеМодули = СтруктураПараметров.СписокОбщихМодулей.НайтиСтроки(СтруктураОтбора);
		
	КонецЕсли;
	
	Для ИнкрементВыполнения = 0 По СтруктураПараметров.ВсегоОбъектов - 1 Цикл
		
		СтрокаИтерации = СтруктураПараметров.СписокФайлов[ИнкрементВыполнения];
		
		ОбработатьФайлИзСпискаФайлов(СтрокаИтерации,
									НеиспользуемыеМодули,
									СтруктураПараметров.ИсправлятьКодДемоПримеров,
									СтруктураПараметров.ИсправлятьКодНеиспользуемыхМодулей,
									СтруктураПараметров.КомментироватьНайденныйКод);
		
		СтруктураОписания = ПолучитьСтруктуруОписанияВыполненияДлительнойОперации(
			СтруктураПараметров, ИнкрементВыполнения);
		
		ДлительныеОперации.СообщитьПрогресс(СтруктураОписания.Процент, СтруктураОписания.Описание);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(СтруктураПараметров.СписокФайлов, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

#Область ДлительныеОперации

Процедура Пауза(ВремяПаузы)
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	Пока ТекущаяДатаСеанса() < ТекущаяДатаСеанса + ВремяПаузы Цикл
		// Ожидание
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСтруктуруОписанияВыполненияДлительнойОперации(СтруктураПараметров, ИнкрементВыполнения)
	
	СтруктураОписания = Новый Структура;
	
	СдвинутыйИнкремент	= ИнкрементВыполнения + 1;
	ПроцентВыполнения	= Окр(СдвинутыйИнкремент / СтруктураПараметров.ВсегоОбъектов, 2) * 100;
	
	АбсолютныйПутьКФайлу	= СтруктураПараметров.СписокФайлов[ИнкрементВыполнения].ПолноеИмяФайла;
	РазделениеПути			= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		АбсолютныйПутьКФайлу, СтруктураПараметров.КорневойКаталогВыгрузки, Ложь);
		
	ОтносительныйПутьКФайлу = "";
	Если РазделениеПути.Количество() = 2 Тогда
		
		ОтносительныйПутьКФайлу = ".." + РазделениеПути[1];
		
	КонецЕсли;
	
	Описание = СтрШаблон("Исправление модуля ""%1"" (%2 из %3)",
		ОтносительныйПутьКФайлу, СдвинутыйИнкремент, СтруктураПараметров.ВсегоОбъектов);
	
	СтруктураОписания.Вставить("Процент"	, ПроцентВыполнения);
	СтруктураОписания.Вставить("Описание"	, Описание);
	
	Возврат СтруктураОписания;
	
КонецФункции

#КонецОбласти // ДлительныеОперации

#Область РаботаСBSL

Процедура ОбработатьФайлИзСпискаФайлов(СтрокаИтерации,
										НеиспользуемыеМодули,
										ИсправлятьКодДемоПримеров,
										ИсправлятьКодНеиспользуемыхМодулей,
										КомментироватьНайденныйКод)
	
	СсылкаНаХранилище = СтрокаИтерации.СсылкаНаХранилище;
	
	ДвоичныеДанныеФайла = СсылкаНаХранилище.Получить();
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("bsl");
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
	
	ТекстBSL = Новый ТекстовыйДокумент;
	ТекстBSL.Прочитать(ИмяВременногоФайла);
	КоличествоСтрокФайла = ТекстBSL.КоличествоСтрок();
	
	ЗамененныеСтроки = ИнициализироватьТаблицуЗамененныхСтрок();
	
	НомерСтрокиНачалаВызова = 0;
	Для НомерСтроки = 1 По КоличествоСтрокФайла Цикл
		
		СтрокаФайла = ТекстBSL.ПолучитьСтроку(НомерСтроки);
		
		Если ИсправлятьКодДемоПримеров Тогда
			
			ОбойтиСтрокуСИсправлениемКодаДемоПримеров(
				СтрокаФайла, ЗамененныеСтроки, НомерСтрокиНачалаВызова, НомерСтроки);
			
		КонецЕсли;
		
		Если ИсправлятьКодНеиспользуемыхМодулей И НеиспользуемыеМодули.Количество() Тогда
			
			ОбойтиСтрокуСИсправлениемКодаНеиспользуемыхМодулей(
				СтрокаФайла, НеиспользуемыеМодули, ЗамененныеСтроки, НомерСтрокиНачалаВызова, НомерСтроки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗамененныеСтроки.Сортировать("НомерСтроки Убыв");
	
	Для Каждого НеобходимаяСтрока Из ЗамененныеСтроки Цикл
		
		Если КомментироватьНайденныйКод Тогда
			
			ТекстBSL.ЗаменитьСтроку(НеобходимаяСтрока.НомерСтроки, "// " + НеобходимаяСтрока.НоваяСтрока);
			
		Иначе
			
			ТекстBSL.УдалитьСтроку(НеобходимаяСтрока.НомерСтроки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗамененныеСтроки.Количество() Тогда
		
		ТекстBSL.Записать(ИмяВременногоФайла);
		
		ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяВременногоФайла);
		
		СтрокаИтерации.БылИзменен			= Истина;
		СтрокаИтерации.СсылкаНаХранилище	= Новый ХранилищеЗначения(ДвоичныеДанныеФайла, Новый СжатиеДанных());
		
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		// Вставить текст ошибки
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбойтиСтрокуСИсправлениемКодаДемоПримеров(
	СтрокаФайла, ЗамененныеСтроки, НомерСтрокиНачалаВызова, НомерСтроки)
	
	Если ПустаяСтрока(СтрокаФайла) Тогда
		Возврат;
	КонецЕсли;
	
	// Запоминаем номер строки начала примера
	Если СтрНайти(СтрокаФайла, "_Демо начало примера") > 0 Тогда
		
		НомерСтрокиНачалаВызова = НомерСтроки;
		
	КонецЕсли;
	
	// Если дошли до конца примера, обнуляем номер строки начала примера,
	// для того, чтобы регулировать массив строк к замене
	Если СтрНайти(СтрокаФайла, "_Демо конец примера") > 0 Тогда
		
		НомерСтрокиНачалаВызова = 0;
		
	КонецЕсли;
	
	Если Не НомерСтрокиНачалаВызова = 0 И НомерСтроки > НомерСтрокиНачалаВызова Тогда
		
		СтрокаКЗамене = ЗамененныеСтроки.Добавить();
		СтрокаКЗамене.НомерСтроки = НомерСтроки;
		СтрокаКЗамене.НоваяСтрока = СтрокаФайла;
		
	ИначеЕсли НомерСтрокиНачалаВызова = 0 И СтрНайти(СтрокаФайла, "_Демо") > 0 Тогда
		
		СтрокаКЗамене = ЗамененныеСтроки.Добавить();
		СтрокаКЗамене.НомерСтроки = НомерСтроки;
		СтрокаКЗамене.НоваяСтрока = СтрокаФайла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбойтиСтрокуСИсправлениемКодаНеиспользуемыхМодулей(
	СтрокаФайла, НеиспользуемыеМодули, ЗамененныеСтроки, НомерСтрокиНачалаВызова, НомерСтроки)
	
	Если ПустаяСтрока(СтрокаФайла) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗамененныеСтроки.Найти(НомерСтроки, "НомерСтроки") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВЭтойСтрокеЕстьВызовМодуля = Ложь;
	Для Каждого СтрокаМодуля Из НеиспользуемыеМодули Цикл
		
		ВЭтойСтрокеЕстьВызовМодуля = СтрНайти(СтрокаФайла, СтрокаМодуля.ИмяОбщегоМодуля) > 0;
		
	КонецЦикла;
	
	Если ВЭтойСтрокеЕстьВызовМодуля Тогда
		
		НомерСтрокиНачалаВызова = НомерСтроки;
		
	КонецЕсли;
	
	Если СтрНайти(СтрокаФайла, ")") > 0 Тогда
		
		НомерСтрокиНачалаВызова = 0;
		
	КонецЕсли;
	
	Если Не НомерСтрокиНачалаВызова = 0 И НомерСтроки >= НомерСтрокиНачалаВызова Тогда
		
		СтрокаКЗамене = ЗамененныеСтроки.Добавить();
		СтрокаКЗамене.НомерСтроки = НомерСтроки;
		СтрокаКЗамене.НоваяСтрока = СтрокаФайла;
		
	ИначеЕсли ВЭтойСтрокеЕстьВызовМодуля И НомерСтрокиНачалаВызова = 0 Тогда
		
		СтрокаКЗамене = ЗамененныеСтроки.Добавить();
		СтрокаКЗамене.НомерСтроки = НомерСтроки;
		СтрокаКЗамене.НоваяСтрока = СтрокаФайла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // РаботаСBSL

#Область Прочее

Функция ИнициализироватьТаблицуЗамененныхСтрок()
	
	ЗамененныеСтроки = Новый ТаблицаЗначений;
	
	ЗамененныеСтроки.Колонки.Добавить("НомерСтроки",
		ОбщегоНазначения.ОписаниеТипаЧисло(10, 0, ДопустимыйЗнак.Неотрицательный));
	ЗамененныеСтроки.Колонки.Добавить("НоваяСтрока",
		ОбщегоНазначения.ОписаниеТипаСтрока(300));
	
	Возврат ЗамененныеСтроки;
	
КонецФункции

#КонецОбласти // Прочее

#КонецОбласти // СлужебныеПроцедурыИФункции