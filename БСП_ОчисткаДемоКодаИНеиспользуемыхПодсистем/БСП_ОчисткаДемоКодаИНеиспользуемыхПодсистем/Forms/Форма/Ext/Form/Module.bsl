
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПоместитьВнешнююОбработкуВХранилище();
	
	Элементы.ГруппаСписокОбщихМодулей.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КорневойКаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РежимВыбораФайла = РежимДиалогаВыбораФайла.ВыборКаталога;
	
	ДиалогОткрытия = Новый ДиалогВыбораФайла(РежимВыбораФайла);
	ДиалогОткрытия.Каталог				= "";
	ДиалогОткрытия.МножественныйВыбор	= Ложь;
	ДиалогОткрытия.Заголовок			= "Выберите каталог импорта";
	
	Если ДиалогОткрытия.Выбрать() Тогда
		
		КорневойКаталогВыгрузки = ДиалогОткрытия.Каталог;
		
		ПоместитьФайлыНаСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправлятьКодНеиспользуемыхМодулейПриИзменении(Элемент)
	
	Элементы.ГруппаСписокОбщихМодулей.Видимость = Истина;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеречитатьФайлы(Команда)
	
	Если Не ЗначениеЗаполнено(КорневойКаталогВыгрузки) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Поле ""Корневой каталог импорта"" не заполнено'"
			+ "; en = 'Field ""Import parent path"" is missing'");
		Сообщение.Поле = "КорневойКаталогВыгрузки";
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ПоместитьФайлыНаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвестиЗамену(Команда)
	
	НаименованиеФоновогоЗадания	= НСтр("ru = 'ИсправлениеКодаВФайлахКонфигурации'"
		+ "; en = 'CorrectingCodeInConfigurationFiles'");
	ОписаниеФоновогоЗадания		= НСтр("ru = 'Выполнение исправления кода в файлах конфигурации'"
		+ "; en = 'Correcting code in files of configuration'");
	ИмяПроцедурыФункции = "ВыполнитьДлительнуюОперациюИсправлениеФайлов";
	
	ВыполнитьПроцедуруФоново(НаименованиеФоновогоЗадания, ОписаниеФоновогоЗадания, ИмяПроцедурыФункции);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

#Область РаботаСФайлами

&НаКлиенте
Процедура ПоместитьФайлыНаСервер()
	
	Если ЗначениеЗаполнено(КорневойКаталогВыгрузки) Тогда
		
		МассивФайлов = НайтиФайлы(КорневойКаталогВыгрузки, "*", Истина);
		
		МассивОписанийПередаваемыхФайлов = Новый Массив;
		Для каждого ЭлементМассива из МассивФайлов Цикл
			
			Если ВРег(ЭлементМассива.Расширение) = ".BSL" Тогда
				МассивОписанийПередаваемыхФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ЭлементМассива.ПолноеИмя));
			КонецЕсли;
			
		КонецЦикла;
		
		СписокФайлов.Очистить();
		
		Если ИсправлятьКодНеиспользуемыхМодулей Тогда
			
			ДобавитьВСписокОбщихМодулейВсеМодулиКонфигурации();
			
		КонецЕсли;
		
		ЗагрузитьФайлыНаКлиентеЗавершение = Новый ОписаниеОповещения("ЗагрузитьФайлыНаКлиентеЗавершение", ЭтотОбъект);
		НачатьПомещениеФайловНаСервер(ЗагрузитьФайлыНаКлиентеЗавершение,,,МассивОписанийПередаваемыхФайлов, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВСписокОбщихМодулейВсеМодулиКонфигурации()
	
	СписокОбщихМодулейПрисутствующихВСистеме.Очистить();
	
	// Заполняем список доступными модулями из конфигурации
	Для Каждого ОбщийМодуль Из Метаданные.ОбщиеМодули Цикл
		
		НовыйОбщийМодуль = СписокОбщихМодулейПрисутствующихВСистеме.Добавить();
		НовыйОбщийМодуль.ИмяОбщегоМодуля		= ОбщийМодуль.Имя;
		НовыйОбщийМодуль.ИспользуетсяВСистеме	= Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлыНаКлиентеЗавершение(ПомещенныеФайлы, Дополнительно) Экспорт
	
	Для Каждого ПомещенныйФайл Из ПомещенныеФайлы Цикл
		
		ЗагрузитьФайлНаФормуНаСервере(ПомещенныйФайл.Адрес,
			ПомещенныйФайл.СсылкаНаФайл.Файл.ИмяБезРасширения,
			ПомещенныйФайл.СсылкаНаФайл.Файл.Расширение,
			ПомещенныйФайл.СсылкаНаФайл.Файл.ПолноеИмя);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьФайлНаФормуНаСервере(АдресФайла, ИмяФайла, Расширение, ПолноеИмя)
	
	НоваяСтрокаСпискаФайлов = СписокФайлов.Добавить();
	
	НоваяСтрокаСпискаФайлов.ИмяФайлаБезРасширения	= ИмяФайла;
	НоваяСтрокаСпискаФайлов.РасширениеФайла			= Расширение;
	НоваяСтрокаСпискаФайлов.ПолноеИмяФайла			= ПолноеИмя;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	НоваяСтрокаСпискаФайлов.СсылкаНаХранилище		= Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных());
	
	Если ИсправлятьКодНеиспользуемыхМодулей Тогда
	
		ДобавитьОбщийМодульВСписокОбщихМодулей(ПолноеИмя);
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОбщийМодульВСписокОбщихМодулей(ПолноеИмя)
	
	// Если после разделения количество равно двум, то это общий модуль
	РазделителиПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмя,
											КорневойКаталогВыгрузки + "\CommonModules\", Ложь);
	
	Если РазделителиПути.Количество() = 2 Тогда
		
		ЧастиПути = СтрРазделить(РазделителиПути[1], "\");
		
		Если ЧастиПути.Количество() Тогда
			
			ИмяОбщегоМодуля = ЧастиПути[0];
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ИмяОбщегоМодуля", ИмяОбщегоМодуля);
			
			НайденныеСтроки = СписокОбщихМодулейПрисутствующихВСистеме.НайтиСтроки(СтруктураОтбора);
			
			Для Каждого СтрокаОбщихМодулей Из НайденныеСтроки Цикл
				
				СтрокаОбщихМодулей.ИспользуетсяВСистеме = Истина;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // РаботаСФайлами

#Область ДлительныеОперации

&НаКлиенте
Процедура ВыполнитьПроцедуруФоново(НаименованиеФоновогоЗадания, ОписаниеФоновогоЗадания, ИмяПроцедурыФункции)
	
	ДлительнаяОперация = ВыполнитьФоновоеЗаданиеНаСервере(НаименованиеФоновогоЗадания,
															ИмяПроцедурыФункции);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьПрогрессВыполнения	= Истина;
	ПараметрыОжидания.Интервал						= 1;
	ПараметрыОжидания.ТекстСообщения				= ОписаниеФоновогоЗадания;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		ДлительнаяОперация,
		Новый ОписаниеОповещения("ВыполнитьПроцедуруФоновоВыполнено", ЭтотОбъект),
		ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьФоновоеЗаданиеНаСервере(НаименованиеФоновогоЗадания, ИмяПроцедурыФункции)
	
	ПараметрыПроцедуры = ПолучитьПараметрыПроцедурыДлительнойОперации(НаименованиеФоновогоЗадания,
																		ИмяПроцедурыФункции);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = ПараметрыПроцедуры.ИмяФоновогоЗадания;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ВыполняемыйМетод = "ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки";
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		ВыполняемыйМетод,
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПроцедуруФоновоВыполнено(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
		
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		// Обрабатываем результат таблицы значений на сервере и помещаем
		// данные из хранилища значений во временное хранилище
		ОбработатьРезультатВыполненияФоновогоЗаданияНаСервере(Результат.АдресРезультата);
		
		// Получаем на клиенте данные из временного хранилища и записываем их
		ОбработатьРезультатВыполненияФоновогоЗаданияНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатВыполненияФоновогоЗаданияНаСервере(АдресРезультата)
	
	ТаблицаСНовымиФайлами = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	СписокФайлов.Загрузить(ТаблицаСНовымиФайлами);
	
	ИзмененныеФайлы = СписокФайлов.НайтиСтроки(Новый Структура("БылИзменен", Истина));
	
	Для Каждого ФайлКОбработке Из ИзмененныеФайлы Цикл
		
		ФайлИзХранилища = ФайлКОбработке.СсылкаНаХранилище.Получить();
		
		ФайлКОбработке.АдресХранилища = ПоместитьВоВременноеХранилище(ФайлИзХранилища);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатВыполненияФоновогоЗаданияНаКлиенте()
	
	ИзмененныеФайлы = СписокФайлов.НайтиСтроки(Новый Структура("БылИзменен", Истина));
	
	Для Каждого ФайлКОбработке Из ИзмененныеФайлы Цикл
		
		ФайлИзХранилища = ПолучитьИзВременногоХранилища(ФайлКОбработке.АдресХранилища);
		
		Попытка
			ФайлИзХранилища.Записать(ФайлКОбработке.ПолноеИмяФайла);
		Исключение
			// Вставить текст ошибки
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыПроцедурыДлительнойОперации(НаименованиеФоновогоЗадания, ИмяПроцедурыФункции)
	
	ЭтоВнешняяОбработка = ЭтоВнешняяОбработка();
	
	Если ЭтоВнешняяОбработка Тогда
		Если ПустаяСтрока(ФоновоеЗаданиеДлительнойОперацииМестонахождениеВнешнейОбработкиСервер) Тогда
			ФоновоеЗаданиеДлительнойОперацииМестонахождениеВнешнейОбработкиСервер = ПолучитьИмяВременногоФайла("epf");
		КонецЕсли;
		ДвоичныеДанныеВнешнейОбработки = ПолучитьИзВременногоХранилища(АдресХранилищаВнешнейОбработки);
		ДвоичныеДанныеВнешнейОбработки.Записать(ФоновоеЗаданиеДлительнойОперацииМестонахождениеВнешнейОбработкиСервер);
		ИмяОбработки = ФоновоеЗаданиеДлительнойОперацииМестонахождениеВнешнейОбработкиСервер;
	Иначе
		ЧастиИмениФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяФормы, ".");
		ИмяОбработки = ЧастиИмениФормы[1];
	КонецЕсли;
	
	ПараметрыДлительнойОперации = ПодготовитьСтруктуруПараметровДлительнойОперации(НаименованиеФоновогоЗадания);
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИмяОбработки"						, ИмяОбработки);
	ПараметрыПроцедуры.Вставить("ИмяМетода"							, ИмяПроцедурыФункции);
	ПараметрыПроцедуры.Вставить("ПараметрыВыполнения"				, ПараметрыДлительнойОперации);
	ПараметрыПроцедуры.Вставить("ЭтоВнешняяОбработка"				, ЭтоВнешняяОбработка);
	ПараметрыПроцедуры.Вставить("ДополнительнаяОбработкаСсылка"		, Неопределено);
	ПараметрыПроцедуры.Вставить("ИмяФоновогоЗадания"				, НаименованиеФоновогоЗадания);
	
	Возврат ПараметрыПроцедуры;
	
КонецФункции

&НаСервере
Функция ПодготовитьСтруктуруПараметровДлительнойОперации(НаименованиеФоновогоЗадания)
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("КорневойКаталогВыгрузки"				, КорневойКаталогВыгрузки);
	СтруктураПараметров.Вставить("ИсправлятьКодДемоПримеров"			, ИсправлятьКодДемоПримеров);
	СтруктураПараметров.Вставить("ИсправлятьКодНеиспользуемыхМодулей"	, ИсправлятьКодНеиспользуемыхМодулей);
	СтруктураПараметров.Вставить("КомментироватьНайденныйКод"			, УдалитьИлиКомментировать);
	СтруктураПараметров.Вставить("ВсегоОбъектов"						, СписокФайлов.Количество());
	СтруктураПараметров.Вставить("СписокФайлов"							, СписокФайлов.Выгрузить());
	СтруктураПараметров.Вставить("СписокОбщихМодулей"					, СписокОбщихМодулейПрисутствующихВСистеме.Выгрузить());
	
	Возврат СтруктураПараметров;
	
КонецФункции

#КонецОбласти // ДлительныеОперации

#Область Прочее

&НаКлиенте
Процедура ПоместитьВнешнююОбработкуВХранилище()
	
	АдресХранилищаВнешнейОбработки = Неопределено;
	
	МестонахождениеВнешнейОбработкиКлиент = "";
	Если ЭтоВнешняяОбработка(МестонахождениеВнешнейОбработкиКлиент) Тогда
		АдресХранилищаВнешнейОбработки = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(МестонахождениеВнешнейОбработкиКлиент), УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭтоВнешняяОбработка(МестонахождениеВнешнейОбработки = "")
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ЭтоВнешняяОбработка = Не Метаданные.Обработки.Содержит(ОбработкаОбъект.Метаданные());
	
	Если ЭтоВнешняяОбработка Тогда
		
		МестонахождениеВнешнейОбработки = ОбработкаОбъект.ИспользуемоеИмяФайла;
		
	КонецЕсли;
	
	Возврат ЭтоВнешняяОбработка;

КонецФункции // ЭтоВнешняяОбработка()

#КонецОбласти

#КонецОбласти // СлужебныеПроцедурыИФункции