
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Заполнение предопределенными данными
	ШиринаСтраницы				= 827;
	ВысотаСтраницы				= 1169;
	ШиринаТаблицы				= 240;
	ШиринаПоляСвойство			= 60;
	ШиринаПоляОписание			= 180;
	ВысотаСтрок					= 30;
	НачальнаяКоординатаX		= 0;
	НачальнаяКоординатаY		= 0;
	РазделительИмениИТипа		= ":";
	СкрытьТаблицыПодШапку		= Ложь;
	РасстояниеМеждуТаблицами	= 30;
	
	Элементы.ТипВыводимыхМетаданных.Доступность = Ложь;
	
	МассивМетаданных = Новый Массив;
	
	Для Каждого ОбъектМетаданных Из Метаданные.Справочники Цикл
		МассивМетаданных.Добавить("Справочник." + ОбъектМетаданных.Имя);
	КонецЦикла;
	
	Для Каждого ОбъектМетаданных Из Метаданные.Документы Цикл
		МассивМетаданных.Добавить("Документ." + ОбъектМетаданных.Имя);
	КонецЦикла;
	
	Для Каждого ОбъектМетаданных Из Метаданные.РегистрыСведений Цикл
		МассивМетаданных.Добавить("РегистрСведений." + ОбъектМетаданных.Имя);
	КонецЦикла;
	
	Для Каждого ОбъектМетаданных Из Метаданные.РегистрыНакопления Цикл
		МассивМетаданных.Добавить("РегистрНакопления." + ОбъектМетаданных.Имя);
	КонецЦикла;
	
	Элементы.ТипВыводимыхМетаданных.СписокВыбора.ЗагрузитьЗначения(МассивМетаданных);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогФыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогФыбораФайла.Фильтр		= НСтр("ru = 'XML-файл (*.xml)|*.xml'; en = 'XML-file (*.xml)|*.xml'"); 
	ДиалогФыбораФайла.Заголовок		= НСтр("ru = 'Выберите файл'; en = 'Choose file'");
	ДиалогФыбораФайла.ИндексФильтра	= 0;
	
	Если ДиалогФыбораФайла.Выбрать() Тогда
		
		ПутьКФайлу = ДиалогФыбораФайла.ПолноеИмяФайла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСвязиТолькоДляПриИзменении(Элемент)
	
	Элементы.ТипВыводимыхМетаданных.Доступность = ПоказатьСвязиТолькоДля;
	ОрбитальныйВывод = ПоказатьСвязиТолькоДля;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМетаданныхВыбранПриИзменении(Элемент)
	
	ИдентификаторСтроки	= Элементы.ДеревоМетаданных.ТекущаяСтрока;
	ТекущаяСтрока		= ДеревоМетаданных.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	РодительСтроки		= ТекущаяСтрока.ПолучитьРодителя();
	
	УстановитьЗначенияФлажковВИерархииВниз(ТекущаяСтрока, ТекущаяСтрока.Выбран);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьДерево(Команда)
	
	ОбновитьДеревоМетаданных();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВФайл(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	XMLСтрока = СформироватьERДиаграммуВФайлXML();
	
	Если ПустаяСтрока(XMLСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	
	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Истина);
	
	ЗаписьXML.ОткрытьФайл(ПутьКФайлу, ПараметрыЗаписиXML);
	
	ЗаписьXML.ЗаписатьБезОбработки(XMLСтрока);
	
	Попытка
		ЗаписьXML.Закрыть();
		ПоказатьОповещениеПользователя("Файл успешно записан");
	Исключение
		Сообщить("Файл не сохранен по причине: " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	УстановитьЗначенияФлажков(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуСоВсех(Команда)
	
	УстановитьЗначенияФлажков(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекВывода(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВысотаСтраницы"				, ВысотаСтраницы);
	ПараметрыОткрытия.Вставить("ВысотаСтрок"				, ВысотаСтрок);
	ПараметрыОткрытия.Вставить("НачальнаяКоординатаX"		, НачальнаяКоординатаX);
	ПараметрыОткрытия.Вставить("НачальнаяКоординатаY"		, НачальнаяКоординатаY);
	ПараметрыОткрытия.Вставить("РазделительИмениИТипа"		, РазделительИмениИТипа);
	ПараметрыОткрытия.Вставить("РасстояниеМеждуТаблицами"	, РасстояниеМеждуТаблицами);
	ПараметрыОткрытия.Вставить("СкрытьТаблицыПодШапку"		, СкрытьТаблицыПодШапку);
	ПараметрыОткрытия.Вставить("ШиринаПоляОписание"			, ШиринаПоляОписание);
	ПараметрыОткрытия.Вставить("ШиринаПоляСвойство"			, ШиринаПоляСвойство);
	ПараметрыОткрытия.Вставить("ШиринаСтраницы"				, ШиринаСтраницы);
	ПараметрыОткрытия.Вставить("ШиринаТаблицы"				, ШиринаТаблицы);
	
	
	ОткрытьФорму("ВнешняяОбработка.ERДиаграммаМетаданныхDrawIO.Форма.ФормаНастроекВывода", ПараметрыОткрытия, ЭтотОбъект, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекСтилей(Команда)
	
	
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

#Область РаботаСФормой

&НаСервере
Процедура ОбновитьДеревоМетаданных()
	
	Если ПоказатьСвязиТолькоДля И Не ЗначениеЗаполнено(ТипВыводимыхМетаданных) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст	= НСтр("ru='Не заполнено поле ""Тип выводимых метаданных""';en='Field isn't filled ""Type of output metadata""'");
		Сообщение.Поле	= "ТипВыводимыхМетаданных";
		Сообщение.Сообщить();
		
	ИначеЕсли ПоказатьСвязиТолькоДля И ЗначениеЗаполнено(ТипВыводимыхМетаданных) Тогда
		
		МассивРаздительТочка = СтрРазделить(ТипВыводимыхМетаданных, ".");
		
		ОбъектМетаданных = Метаданные[ПреобразоватьИмяМетаданныхИзЕдЧислаВМнож(МассивРаздительТочка[0])][МассивРаздительТочка[1]];
		
		ВывестиМетаданныеВДеревоМетаданных(ПодготовитьТаблицуДляПоказаСвязейОдногоЭлементаМетаданных(ОбъектМетаданных, ПреобразоватьИмяМетаданныхИзЕдЧислаВМнож(МассивРаздительТочка[0])));
		
	Иначе
		
		ВывестиМетаданныеВДеревоМетаданных();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМетаданныеВДеревоМетаданных(ТаблицаМетаданных = Неопределено)
	
	ДеревоФормы = РеквизитФормыВЗначение("ДеревоМетаданных");
	ДеревоФормы.Строки.Очистить();
	
	// Справочники
	РодительскаяСтрока = ДеревоФормы.Строки.Добавить();
	РодительскаяСтрока.Имя = "Справочники";
	
	Если Не ЗначениеЗаполнено(ТаблицаМетаданных) Тогда
		НеобходимыеСправочники = Метаданные.Справочники;
	Иначе
		НеобходимыеСправочники = Новый Массив;
		
		СправочникиИзТаблицы = ТаблицаМетаданных.НайтиСтроки(Новый Структура("Владелец", РодительскаяСтрока.Имя));
		
		Для Каждого СтрокаТаблицы Из СправочникиИзТаблицы Цикл
			НеобходимыеСправочники.Добавить(Метаданные[СтрокаТаблицы.Владелец][СтрокаТаблицы.Имя]);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ОбъектМетаданных Из НеобходимыеСправочники Цикл
		
		СтрокаОбъекта = РодительскаяСтрока.Строки.Добавить();
		СтрокаОбъекта.Имя			= ОбъектМетаданных.Имя;
		СтрокаОбъекта.Наименование	= ОбъектМетаданных.Синоним;
		СтрокаОбъекта.Путь			= ОбъектМетаданных.ПолноеИмя();
		СтрокаОбъекта.ТипЗначения	= Новый ОписаниеТипов("СправочникСсылка." + ОбъектМетаданных.Имя);
		
		// Добавляем стандартные реквизиты
		Для Каждого СтандартныйРеквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
			
			Если ПроверитьНеобходимВыводКлючевогоРеквизита(РодительскаяСтрока.Имя, ОбъектМетаданных, СтандартныйРеквизит.Имя) Тогда
				
				СтрокаРеквизита = СтрокаОбъекта.Строки.Добавить();
				СтрокаРеквизита.Имя					= СтандартныйРеквизит.Имя;
				СтрокаРеквизита.ТипЗначения			= СтандартныйРеквизит.Тип;
				СтрокаРеквизита.Наименование		= ?(ПустаяСтрока(СтандартныйРеквизит.Синоним), СтандартныйРеквизит.Имя, СтандартныйРеквизит.Синоним);
				СтрокаРеквизита.Путь				= "Справочник." + СтрокаОбъекта.Имя + "." + СтрокаРеквизита.Имя;
				СтрокаРеквизита.КлючевойРеквизит	= Истина;
				СтрокаРеквизита.ПримитивныйТип		= ПроверитьЭтоПримитивныйТип(СтрокаРеквизита.ТипЗначения);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Добавляем реквизиты и табличные части
		Для Каждого РеквизитОбъекта Из ОбъектМетаданных.Реквизиты Цикл
			
			СтрокаРеквизита = СтрокаОбъекта.Строки.Добавить();
			СтрокаРеквизита.Имя					= РеквизитОбъекта.Имя;
			СтрокаРеквизита.ТипЗначения			= РеквизитОбъекта.Тип;
			СтрокаРеквизита.Наименование		= ?(ПустаяСтрока(РеквизитОбъекта.Синоним), РеквизитОбъекта.Имя, РеквизитОбъекта.Синоним);
			СтрокаРеквизита.Путь				= РеквизитОбъекта.ПолноеИмя();
			СтрокаРеквизита.ПримитивныйТип		= ПроверитьЭтоПримитивныйТип(СтрокаРеквизита.ТипЗначения);
			СтрокаРеквизита.ПроверкаЗаполнения	= ?(РеквизитОбъекта.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку, Истина, Ложь);
			
		КонецЦикла;
		
		Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
			
			СтрокаТабличнойЧасти = СтрокаОбъекта.Строки.Добавить();
			СтрокаТабличнойЧасти.Имя				= ТабличнаяЧасть.Имя;
			СтрокаТабличнойЧасти.Наименование		= ?(ПустаяСтрока(ТабличнаяЧасть.Синоним), ТабличнаяЧасть.Имя, ТабличнаяЧасть.Синоним);
			СтрокаТабличнойЧасти.Путь				= ТабличнаяЧасть.ПолноеИмя();
			СтрокаТабличнойЧасти.ПроверкаЗаполнения	= ?(ТабличнаяЧасть.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку, Истина, Ложь);
			СтрокаТабличнойЧасти.ЭтоТЧ				= Истина;
			
			Для Каждого РеквизитТабличнойЧасти Из ТабличнаяЧасть.Реквизиты Цикл
				
				СтрокаРеквизитаТабличнойЧасти = СтрокаТабличнойЧасти.Строки.Добавить();
				СтрокаРеквизитаТабличнойЧасти.Имя					= РеквизитТабличнойЧасти.Имя;
				СтрокаРеквизитаТабличнойЧасти.ТипЗначения			= РеквизитТабличнойЧасти.Тип;
				СтрокаРеквизитаТабличнойЧасти.Наименование			= ?(ПустаяСтрока(РеквизитТабличнойЧасти.Синоним), РеквизитТабличнойЧасти.Имя, РеквизитТабличнойЧасти.Синоним);
				СтрокаРеквизитаТабличнойЧасти.Путь					= РеквизитТабличнойЧасти.ПолноеИмя();
				СтрокаРеквизитаТабличнойЧасти.ПримитивныйТип		= ПроверитьЭтоПримитивныйТип(СтрокаРеквизитаТабличнойЧасти.ТипЗначения);
				СтрокаРеквизитаТабличнойЧасти.ПроверкаЗаполнения	= ?(РеквизитТабличнойЧасти.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку, Истина, Ложь);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Документы
	РодительскаяСтрока = ДеревоФормы.Строки.Добавить();
	РодительскаяСтрока.Имя = "Документы";
	
	Если Не ЗначениеЗаполнено(ТаблицаМетаданных) Тогда
		НеобходимыеДокументы = Метаданные.Документы;
	Иначе
		НеобходимыеДокументы = Новый Массив;
		
		ДокументыИзТаблицы = ТаблицаМетаданных.НайтиСтроки(Новый Структура("Владелец", РодительскаяСтрока.Имя));
		
		Для Каждого СтрокаТаблицы Из ДокументыИзТаблицы Цикл
			НеобходимыеДокументы.Добавить(Метаданные[СтрокаТаблицы.Владелец][СтрокаТаблицы.Имя]);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ОбъектМетаданных Из НеобходимыеДокументы Цикл
		
		СтрокаОбъекта = РодительскаяСтрока.Строки.Добавить();
		СтрокаОбъекта.Имя			= ОбъектМетаданных.Имя;
		СтрокаОбъекта.Наименование	= ОбъектМетаданных.Синоним;
		СтрокаОбъекта.Путь			= ОбъектМетаданных.ПолноеИмя();
		СтрокаОбъекта.ТипЗначения	= Новый ОписаниеТипов("ДокументСсылка." + ОбъектМетаданных.Имя);
		
		// Добавляем стандартные реквизиты
		Для Каждого СтандартныйРеквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
			
			Если ПроверитьНеобходимВыводКлючевогоРеквизита(РодительскаяСтрока.Имя, ОбъектМетаданных, СтандартныйРеквизит.Имя) Тогда
				
				СтрокаРеквизита = СтрокаОбъекта.Строки.Добавить();
				СтрокаРеквизита.Имя					= СтандартныйРеквизит.Имя;
				СтрокаРеквизита.ТипЗначения			= СтандартныйРеквизит.Тип;
				СтрокаРеквизита.Наименование		= ?(ПустаяСтрока(СтандартныйРеквизит.Синоним), СтандартныйРеквизит.Имя, СтандартныйРеквизит.Синоним);
				СтрокаРеквизита.Путь				= "Документ." + СтрокаОбъекта.Имя + "." + СтрокаРеквизита.Имя;
				СтрокаРеквизита.КлючевойРеквизит	= Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Добавляем реквизиты и табличные части
		Для Каждого РеквизитОбъекта Из ОбъектМетаданных.Реквизиты Цикл
			
			СтрокаРеквизита = СтрокаОбъекта.Строки.Добавить();
			СтрокаРеквизита.Имя					= РеквизитОбъекта.Имя;
			СтрокаРеквизита.ТипЗначения			= РеквизитОбъекта.Тип;
			СтрокаРеквизита.Наименование		= ?(ПустаяСтрока(РеквизитОбъекта.Синоним), РеквизитОбъекта.Имя, РеквизитОбъекта.Синоним);
			СтрокаРеквизита.Путь				= РеквизитОбъекта.ПолноеИмя();
			СтрокаРеквизита.ПримитивныйТип		= ПроверитьЭтоПримитивныйТип(СтрокаРеквизита.ТипЗначения);
			СтрокаРеквизита.ПроверкаЗаполнения	= ?(РеквизитОбъекта.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку, Истина, Ложь);
			
		КонецЦикла;
		
		Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
			
			СтрокаТабличнойЧасти = СтрокаОбъекта.Строки.Добавить();
			СтрокаТабличнойЧасти.Имя				= ТабличнаяЧасть.Имя;
			СтрокаТабличнойЧасти.Наименование		= ?(ПустаяСтрока(ТабличнаяЧасть.Синоним), ТабличнаяЧасть.Имя, ТабличнаяЧасть.Синоним);
			СтрокаТабличнойЧасти.Путь				= ТабличнаяЧасть.ПолноеИмя();
			СтрокаТабличнойЧасти.ПроверкаЗаполнения	= ?(ТабличнаяЧасть.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку, Истина, Ложь);
			СтрокаТабличнойЧасти.ЭтоТЧ				= Истина;
			
			Для Каждого РеквизитТабличнойЧасти Из ТабличнаяЧасть.Реквизиты Цикл
				
				СтрокаРеквизитаТабличнойЧасти = СтрокаТабличнойЧасти.Строки.Добавить();
				СтрокаРеквизитаТабличнойЧасти.Имя					= РеквизитТабличнойЧасти.Имя;
				СтрокаРеквизитаТабличнойЧасти.ТипЗначения			= РеквизитТабличнойЧасти.Тип;
				СтрокаРеквизитаТабличнойЧасти.Наименование			= ?(ПустаяСтрока(РеквизитТабличнойЧасти.Синоним), РеквизитТабличнойЧасти.Имя, РеквизитТабличнойЧасти.Синоним);
				СтрокаРеквизитаТабличнойЧасти.Путь					= РеквизитТабличнойЧасти.ПолноеИмя();
				СтрокаРеквизитаТабличнойЧасти.ПримитивныйТип		= ПроверитьЭтоПримитивныйТип(СтрокаРеквизитаТабличнойЧасти.ТипЗначения);
				СтрокаРеквизитаТабличнойЧасти.ПроверкаЗаполнения	= ?(РеквизитТабличнойЧасти.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку, Истина, Ложь);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	//// Регистры сведений
	//Если Не ЗначениеЗаполнено(ТаблицаМетаданных) Тогда
	//	РодительскаяСтрока = ДеревоФормы.Строки.Добавить();
	//	РодительскаяСтрока.Имя = "РегистрыСведений";
	//	
	//	Для Каждого ОбъектМетаданных Из Метаданные.РегистрыСведений Цикл
	//		СтрокаРегистра = РодительскаяСтрока.Строки.Добавить();
	//		СтрокаРегистра.Имя = ОбъектМетаданных.Имя;
	//		СтрокаРегистра.Путь = ОбъектМетаданных.Имя;
	//	КонецЦикла;
	//КонецЕсли;
	//
	//// Регистры накоплений
	//Если Не ЗначениеЗаполнено(ТаблицаМетаданных) Тогда
	//	РодительскаяСтрока = ДеревоФормы.Строки.Добавить();
	//	РодительскаяСтрока.Имя = "РегистрыНакопления";
	//	
	//	Для каждого ОбъектМетаданных Из Метаданные.РегистрыНакопления Цикл
	//		СтрокаРегистра = РодительскаяСтрока.Строки.Добавить();
	//		СтрокаРегистра.Имя = ОбъектМетаданных.Имя;
	//	КонецЦикла;
	//КонецЕсли;
	
	// Перечисления
	РодительскаяСтрока = ДеревоФормы.Строки.Добавить();
	РодительскаяСтрока.Имя = "Перечисления";
	
	Если Не ЗначениеЗаполнено(ТаблицаМетаданных) Тогда
		НеобходимыеПеречисления = Метаданные.Перечисления;
	Иначе
		НеобходимыеПеречисления = Новый Массив;
		
		ПеречисленияИзТаблицы = ТаблицаМетаданных.НайтиСтроки(Новый Структура("Владелец", РодительскаяСтрока.Имя));
		
		Для Каждого СтрокаТаблицы Из ПеречисленияИзТаблицы Цикл
			НеобходимыеПеречисления.Добавить(Метаданные[СтрокаТаблицы.Владелец][СтрокаТаблицы.Имя]);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого ОбъектМетаданных Из НеобходимыеПеречисления Цикл
		ЗначениеПеречисления = РодительскаяСтрока.Строки.Добавить();
		ЗначениеПеречисления.Имя			= ОбъектМетаданных.Имя;
		ЗначениеПеречисления.Наименование	= ОбъектМетаданных.Синоним;
		ЗначениеПеречисления.Путь			= ОбъектМетаданных.ПолноеИмя();
		ЗначениеПеречисления.ТипЗначения	= Новый ОписаниеТипов("ПеречислениеСсылка." + ОбъектМетаданных.Имя);
	КонецЦикла;
	
	// Подчищаем пустые метаданные, если они есть
	КоличествоВладельцевМетаданных = ДеревоФормы.Строки.Количество() - 1;
	Пока КоличествоВладельцевМетаданных >= 0 Цикл
		
		Если Не ДеревоФормы.Строки[КоличествоВладельцевМетаданных].Строки.Количество() Тогда
			ДеревоФормы.Строки.Удалить(КоличествоВладельцевМетаданных);
		КонецЕсли;
		
		КоличествоВладельцевМетаданных = КоличествоВладельцевМетаданных - 1;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоФормы, "ДеревоМетаданных");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияФлажков(ЗначениеФлага)
	
	ДанныеДерева = РеквизитФормыВЗначение("ДеревоМетаданных");
	
	УстановитьЗначенияФлажковРекурсивно(ДанныеДерева.Строки, ЗначениеФлага);
	
	ЗначениеВРеквизитФормы(ДанныеДерева, "ДеревоМетаданных");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьЗначенияФлажковРекурсивно(СтрокиДерева, ЗначениеФлага)
	
	Для Каждого СтрокаРодителя Из СтрокиДерева Цикл
		
		СтрокаРодителя.Выбран = ЗначениеФлага;
		
		УстановитьЗначенияФлажковРекурсивно(СтрокаРодителя.Строки, ЗначениеФлага);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначенияФлажковВИерархииВниз(СтрокаВерхнейИерархии, ЗначениеФлага)
	
	ЭлементыСтроки = СтрокаВерхнейИерархии.ПолучитьЭлементы();
	
	Для Каждого СтрокаДерева Из ЭлементыСтроки Цикл
		СтрокаДерева.Выбран = ЗначениеФлага;
		
		УстановитьЗначенияФлажковВИерархииВниз(СтрокаДерева, ЗначениеФлага);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // РаботаСФормой

#Область РаботаСXML

&НаСервере
Функция СформироватьERДиаграммуВФайлXML()
	
	ИдентификаторЭлемента = 0;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("mxfile");
	ЗаписьXML.ЗаписатьАтрибут("host"	, "app.diagrams.net");
	ЗаписьXML.ЗаписатьАтрибут("modified", ПолучитьДатуВМиллисекундах(ТекущаяДатаСеанса()));
	ЗаписьXML.ЗаписатьАтрибут("agent"	, "1C: Enterprise");
	ЗаписьXML.ЗаписатьАтрибут("version"	, "14.9.3");
	ЗаписьXML.ЗаписатьАтрибут("type"	, "device");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("diagram");
	ЗаписьXML.ЗаписатьАтрибут("id", "1");
	ЗаписьXML.ЗаписатьАтрибут("name", "Page-1");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("mxGraphModel");
	ЗаписьXML.ЗаписатьАтрибут("dx"			, "946");
	ЗаписьXML.ЗаписатьАтрибут("dy"			, "530");
	ЗаписьXML.ЗаписатьАтрибут("grid"		, "1");
	ЗаписьXML.ЗаписатьАтрибут("gridSize"	, "10");
	ЗаписьXML.ЗаписатьАтрибут("guides"		, "1");
	ЗаписьXML.ЗаписатьАтрибут("tooltips"	, "1");
	ЗаписьXML.ЗаписатьАтрибут("connect"		, "1");
	ЗаписьXML.ЗаписатьАтрибут("arrows"		, "1");
	ЗаписьXML.ЗаписатьАтрибут("fold"		, "1");
	ЗаписьXML.ЗаписатьАтрибут("page"		, "1");
	ЗаписьXML.ЗаписатьАтрибут("pageScale"	, "1");
	ЗаписьXML.ЗаписатьАтрибут("pageWidth"	, "827");
	ЗаписьXML.ЗаписатьАтрибут("pageHeight"	, "1169");
	ЗаписьXML.ЗаписатьАтрибут("math"		, "0");
	ЗаписьXML.ЗаписатьАтрибут("shadow"		, "0");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("root");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("mxCell");
	ЗаписьXML.ЗаписатьАтрибут("id", Строка(ИдентификаторЭлемента));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ИдентификаторЭлемента = ИдентификаторЭлемента + 1;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("mxCell");
	ЗаписьXML.ЗаписатьАтрибут("id", Строка(ИдентификаторЭлемента));
	ЗаписьXML.ЗаписатьАтрибут("parent", "0");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ДеревоФормы = РеквизитФормыВЗначение("ДеревоМетаданных");
	
	ВыбранныеСтроки = ДеревоФормы.Строки.НайтиСтроки(Новый Структура("Выбран", Истина));
	
	Если Не ВыбранныеСтроки.Количество() Тогда
		ЗаписьXML.Закрыть();
		Сообщить("Не выбрано ни одной строки в дереве метаданных");
		Возврат "";
	КонецЕсли;
	
	ТаблицаЭлементов = Новый ТаблицаЗначений;
	ТаблицаЭлементов.Колонки.Добавить("id"		, Новый ОписаниеТипов("Число"));	// Идентификатор - Для всех элементов
	ТаблицаЭлементов.Колонки.Добавить("parent"	, Новый ОписаниеТипов("Число"));	// Родитель - Для всех элементов
	ТаблицаЭлементов.Колонки.Добавить("inccol"	, Новый ОписаниеТипов("Число"));	// Итератор колонок / орбит - Для таблиц - не выгружается!
	ТаблицаЭлементов.Колонки.Добавить("incline"	, Новый ОписаниеТипов("Число"));	// Итератор строк / таблиц - Для таблиц - не выгружается!
	ТаблицаЭлементов.Колонки.Добавить("container", Новый ОписаниеТипов("Число"));	// Контейнер - Для таблиц
	ТаблицаЭлементов.Колонки.Добавить("shape"	, Новый ОписаниеТипов("Строка"));	// Фигура - Для таблиц - влияет на стиль
	ТаблицаЭлементов.Колонки.Добавить("path"	, Новый ОписаниеТипов("Строка"));	// Путь - Для таблиц - не выгружается!
	ТаблицаЭлементов.Колонки.Добавить("type"	, Новый ОписаниеТипов("ОписаниеТипов")); // Тип - для таблиц - не выгружается!
	ТаблицаЭлементов.Колонки.Добавить("x"		, Новый ОписаниеТипов("Число"));	// Расположение по абсциссе - Для таблиц
	ТаблицаЭлементов.Колонки.Добавить("y"		, Новый ОписаниеТипов("Число"));	// Расположение по ординате - Для таблиц
	ТаблицаЭлементов.Колонки.Добавить("width"	, Новый ОписаниеТипов("Число"));	// Ширина - Для таблиц
	ТаблицаЭлементов.Колонки.Добавить("height"	, Новый ОписаниеТипов("Число"));	// Высота - Для таблиц
	ТаблицаЭлементов.Колонки.Добавить("source"	, Новый ОписаниеТипов("Строка"));	// Источник - Для связей
	ТаблицаЭлементов.Колонки.Добавить("target"	, Новый ОписаниеТипов("Строка"));	// Приемник - Для связей
	ТаблицаЭлементов.Колонки.Добавить("points"	, Новый ОписаниеТипов("Массив"));	// Массив точек - Для связей
	
	Если ОрбитальныйВывод Тогда
		
		ИтераторТаблиц = 1;
		ИтераторОрбиты = 1;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Выбран"	, Истина);
		СтруктураОтбора.Вставить("Путь"		, ТипВыводимыхМетаданных);
		Для Каждого РодительскаяСтрока Из ВыбранныеСтроки Цикл
			ГоловнаяСтрокаПоиск = РодительскаяСтрока.Строки.НайтиСтроки(СтруктураОтбора);
			
			Если ГоловнаяСтрокаПоиск.Количество() Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ГоловнаяСтрокаПоиск.Количество() Тогда
			ГоловнаяСтрока = ГоловнаяСтрокаПоиск[0];
		Иначе
			Сообщить("Не найден / не выбран головной элемент в дереве метаданных, для которого назначен вывод");
			Возврат "";
		КонецЕсли;
		
		СформироватьГоловнуюТаблицуПоОрбитеВXML(ЗаписьXML, ИдентификаторЭлемента, ТаблицаЭлементов, ГоловнаяСтрока);
		
		Для Каждого РодительскаяСтрока Из ВыбранныеСтроки Цикл
			
			СформироватьСтрокиМетаданныхПоОрбитеВXML(ЗаписьXML, ИдентификаторЭлемента,
				ТаблицаЭлементов, РодительскаяСтрока, ИтераторТаблиц, ИтераторОрбиты);
			
		КонецЦикла;
		
	Иначе
		
		СеткаРазметки = СформироватьГоризонтальнуюСеткуРазметкиТаблиц();
		КоличествоТаблицВСтрокеСетки = СеткаРазметки.Количество();
		ИтераторТаблицТекущейСтроки = 1;
		ИтераторСтрокВСетке = 1;
		
		Для Каждого РодительскаяСтрока Из ВыбранныеСтроки Цикл
			
			СформироватьСтрокиМетаданныхПоСеткеВXML(ЗаписьXML, ИдентификаторЭлемента, ТаблицаЭлементов, РодительскаяСтрока,
				СеткаРазметки, КоличествоТаблицВСтрокеСетки, ИтераторТаблицТекущейСтроки, ИтераторСтрокВСетке);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого РодительскаяСтрока Из ВыбранныеСтроки Цикл
		
		СформироватьСвязиМетаданныхДляРеквизитовВXML(ЗаписьXML, ИдентификаторЭлемента, ТаблицаЭлементов, РодительскаяСтрока);
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // root
	ЗаписьXML.ЗаписатьКонецЭлемента(); // mxGraphModel
	ЗаписьXML.ЗаписатьКонецЭлемента(); // diagram
	ЗаписьXML.ЗаписатьКонецЭлемента(); // mxfile
	
	XMLФайл = ЗаписьXML.Закрыть();
	
	Возврат XMLФайл;
	
КонецФункции

&НаСервере
Процедура СформироватьГоловнуюТаблицуПоОрбитеВXML(ЗаписьXML, ИдентификаторЭлемента, ТаблицаЭлементов, ГоловнаяСтрока)
	
	ВысотаТаблицы = ВысотаСтрок; // На заголовок
	ВысотаТаблицы = ВысотаТаблицы + ВысотаСтрок
		* ГоловнаяСтрока.Строки.НайтиСтроки(Новый Структура("Выбран", Истина)).Количество(); // На реквизиты
	Для Каждого СтрокаРеквизитов Из ГоловнаяСтрока.Строки Цикл
		// Находим табличную часть
		Если СтрокаРеквизитов.ЭтоТЧ Тогда
			ВысотаТаблицы = ВысотаТаблицы + ВысотаСтрок
				* СтрокаРеквизитов.Строки.НайтиСтроки(Новый Структура("Выбран", Истина)).Количество(); // На реквизиты табличной части
		КонецЕсли;
	КонецЦикла;
	
	ИдентификаторЭлемента = ИдентификаторЭлемента + 1;
	
	ЦентрX = ШиринаСтраницы / 2;
	ЦентрY = ВысотаСтраницы / 2;
	
	Координаты = Новый Структура;
	Координаты.Вставить("X", ЦентрX - ШиринаТаблицы / 2);
	Координаты.Вставить("Y", ЦентрY - ВысотаТаблицы / 2);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("mxCell");
	ЗаписьXML.ЗаписатьАтрибут("id"		, Строка(ИдентификаторЭлемента));
	ЗаписьXML.ЗаписатьАтрибут("value"	, ГоловнаяСтрока.Путь);
	ЗаписьXML.ЗаписатьАтрибут("style"	, ПолучитьСтильВЗависимостиОтФигурыЭлемента("table"));
	ЗаписьXML.ЗаписатьАтрибут("vertex"	, "1");
	ЗаписьXML.ЗаписатьАтрибут("parent"	, "1");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("mxGeometry");
	ЗаписьXML.ЗаписатьАтрибут("x"		, Формат(Координаты.X, "ЧН=0; ЧГ="));
	ЗаписьXML.ЗаписатьАтрибут("y"		, Формат(Координаты.Y, "ЧН=0; ЧГ="));
	ЗаписьXML.ЗаписатьАтрибут("width"	, Формат(ШиринаТаблицы, "ЧН=0; ЧГ="));
	ЗаписьXML.ЗаписатьАтрибут("height"	, Формат(ВысотаТаблицы, "ЧН=0; ЧГ="));
	ЗаписьXML.ЗаписатьАтрибут("as"		, "geometry");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // mxCell
	
	НовыйЭлемент = ТаблицаЭлементов.Добавить();
	НовыйЭлемент.id			= ИдентификаторЭлемента;
	НовыйЭлемент.inccol		= 0;
	НовыйЭлемент.incline	= 0;
	НовыйЭлемент.parent		= 1;
	НовыйЭлемент.shape		= "table";
	НовыйЭлемент.path		= ГоловнаяСтрока.Путь;
	НовыйЭлемент.type		= ГоловнаяСтрока.ТипЗначения;
	НовыйЭлемент.x			= Координаты.X;
	НовыйЭлемент.y			= Координаты.Y;
	НовыйЭлемент.width		= ШиринаТаблицы;
	НовыйЭлемент.height		= ВысотаТаблицы;
	
	СформироватьСтрокиРеквизитовВXML(ЗаписьXML,
		ИдентификаторЭлемента, ТаблицаЭлементов, ГоловнаяСтрока, Координаты.X);

КонецПроцедуры

&НаСервере
Процедура СформироватьСтрокиМетаданныхПоОрбитеВXML(ЗаписьXML, ИдентификаторЭлемента,
	ТаблицаЭлементов, РодительскаяСтрока, ИтераторТаблиц, ИтераторОрбиты)
	
	ИмяТипа = РодительскаяСтрока.Имя;
	
	ВыбранныеСтроки = РодительскаяСтрока.Строки.НайтиСтроки(Новый Структура("Выбран", Истина));
	
	Для Каждого СтрокаМетаданных Из ВыбранныеСтроки Цикл
		
		ПоискДублей = ТаблицаЭлементов.Найти(СтрокаМетаданных.Путь, "path");
		
		Если Не ПоискДублей = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВысотаТаблицы = ВысотаСтрок; // На заголовок
		ВысотаТаблицы = ВысотаТаблицы + ВысотаСтрок
			* СтрокаМетаданных.Строки.НайтиСтроки(Новый Структура("Выбран", Истина)).Количество(); // На реквизиты
		Для Каждого СтрокаРеквизитов Из СтрокаМетаданных.Строки Цикл
			// Находим табличную часть
			Если СтрокаРеквизитов.ЭтоТЧ Тогда
				ВысотаТаблицы = ВысотаТаблицы + ВысотаСтрок
					* СтрокаРеквизитов.Строки.НайтиСтроки(Новый Структура("Выбран", Истина)).Количество(); // На реквизиты табличной части
			КонецЕсли;
		КонецЦикла;
		
		ИдентификаторЭлемента = ИдентификаторЭлемента + 1;
		
		Координаты = ПолучитьНовыеКоординатыТаблицыПоОрбите(
			ИдентификаторЭлемента, ТаблицаЭлементов, ИтераторТаблиц, ИтераторОрбиты, ВысотаТаблицы);
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("mxCell");
		ЗаписьXML.ЗаписатьАтрибут("id"		, Строка(ИдентификаторЭлемента));
		ЗаписьXML.ЗаписатьАтрибут("value"	, СтрокаМетаданных.Путь);
		ЗаписьXML.ЗаписатьАтрибут("style"	, ПолучитьСтильВЗависимостиОтФигурыЭлемента("table"));
		ЗаписьXML.ЗаписатьАтрибут("vertex"	, "1");
		ЗаписьXML.ЗаписатьАтрибут("parent"	, "1");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("mxGeometry");
		ЗаписьXML.ЗаписатьАтрибут("x"	, Формат(Координаты.X, "ЧН=0; ЧГ="));
		ЗаписьXML.ЗаписатьАтрибут("y"	, Формат(Координаты.Y, "ЧН=0; ЧГ="));
		ЗаписьXML.ЗаписатьАтрибут("width"	, Формат(ШиринаТаблицы, "ЧН=0; ЧГ="));
		ЗаписьXML.ЗаписатьАтрибут("height"	, Формат(ВысотаТаблицы, "ЧН=0; ЧГ="));
		ЗаписьXML.ЗаписатьАтрибут("as"		, "geometry");
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // mxCell
		
		НовыйЭлемент = ТаблицаЭлементов.Добавить();
		НовыйЭлемент.id			= ИдентификаторЭлемента;
		НовыйЭлемент.inccol		= ИтераторОрбиты;
		НовыйЭлемент.incline	= ИтераторТаблиц;
		НовыйЭлемент.parent		= 1;
		НовыйЭлемент.shape		= "table";
		НовыйЭлемент.path		= СтрокаМетаданных.Путь;
		НовыйЭлемент.type		= СтрокаМетаданных.ТипЗначения;
		НовыйЭлемент.x			= Координаты.X;
		НовыйЭлемент.y			= Координаты.Y;
		НовыйЭлемент.width		= ШиринаТаблицы;
		НовыйЭлемент.height		= ВысотаТаблицы;
		
		СформироватьСтрокиРеквизитовВXML(ЗаписьXML,
			ИдентификаторЭлемента, ТаблицаЭлементов, СтрокаМетаданных, Координаты.X);
		
		ИтераторТаблиц = ИтераторТаблиц + 1;
		
		Если ИтераторТаблиц > 4 Тогда
			
			ИтераторТаблиц = 1;
			ИтераторОрбиты = ИтераторОрбиты + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтрокиМетаданныхПоСеткеВXML(ЗаписьXML, ИдентификаторЭлемента, ТаблицаЭлементов,
	РодительскаяСтрока, СеткаРазметки, КоличествоТаблицВСтрокеСетки, ИтераторТаблицТекущейСтроки, ИтераторСтрокВСетке)
	
	ИмяТипа = РодительскаяСтрока.Имя;
	
	ВыбранныеСтроки = РодительскаяСтрока.Строки.НайтиСтроки(Новый Структура("Выбран", Истина));
	
	Для Каждого СтрокаМетаданных Из ВыбранныеСтроки Цикл
		
		ПоискДублей = ТаблицаЭлементов.Найти(СтрокаМетаданных.Путь, "path");
		
		Если Не ПоискДублей = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВысотаТаблицы = ВысотаСтрок; // На заголовок
		ВысотаТаблицы = ВысотаТаблицы + ВысотаСтрок
			* СтрокаМетаданных.Строки.НайтиСтроки(Новый Структура("Выбран", Истина)).Количество(); // На реквизиты
		Для Каждого СтрокаРеквизитов Из СтрокаМетаданных.Строки Цикл
			// Находим табличную часть
			Если СтрокаРеквизитов.ЭтоТЧ Тогда
				ВысотаТаблицы = ВысотаТаблицы + ВысотаСтрок
					* СтрокаРеквизитов.Строки.НайтиСтроки(Новый Структура("Выбран", Истина)).Количество(); // На реквизиты табличной части
			КонецЕсли;
		КонецЦикла;
		
		ИдентификаторЭлемента = ИдентификаторЭлемента + 1;
		
		Координаты = ПолучитьНовыеКоординатыТаблицыПоСетке(ИдентификаторЭлемента,
			ТаблицаЭлементов, СеткаРазметки, ИтераторТаблицТекущейСтроки, ИтераторСтрокВСетке);
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("mxCell");
		ЗаписьXML.ЗаписатьАтрибут("id"		, Строка(ИдентификаторЭлемента));
		ЗаписьXML.ЗаписатьАтрибут("value"	, СтрокаМетаданных.Путь);
		ЗаписьXML.ЗаписатьАтрибут("style"	, ПолучитьСтильВЗависимостиОтФигурыЭлемента("table"));
		ЗаписьXML.ЗаписатьАтрибут("vertex"	, "1");
		ЗаписьXML.ЗаписатьАтрибут("parent"	, "1");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("mxGeometry");
		ЗаписьXML.ЗаписатьАтрибут("x"	, Формат(Координаты.X, "ЧН=0; ЧГ="));
		ЗаписьXML.ЗаписатьАтрибут("y"	, Формат(Координаты.Y, "ЧН=0; ЧГ="));
		ЗаписьXML.ЗаписатьАтрибут("width"	, Формат(ШиринаТаблицы, "ЧН=0; ЧГ="));
		ЗаписьXML.ЗаписатьАтрибут("height"	, Формат(ВысотаТаблицы, "ЧН=0; ЧГ="));
		ЗаписьXML.ЗаписатьАтрибут("as"		, "geometry");
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // mxCell
		
		НовыйЭлемент = ТаблицаЭлементов.Добавить();
		НовыйЭлемент.id			= ИдентификаторЭлемента;
		НовыйЭлемент.inccol		= ИтераторТаблицТекущейСтроки;
		НовыйЭлемент.incline	= ИтераторСтрокВСетке;
		НовыйЭлемент.parent		= 1;
		НовыйЭлемент.shape		= "table";
		НовыйЭлемент.path		= СтрокаМетаданных.Путь;
		НовыйЭлемент.type		= СтрокаМетаданных.ТипЗначения;
		НовыйЭлемент.x			= Координаты.X;
		НовыйЭлемент.y			= Координаты.Y;
		НовыйЭлемент.width		= ШиринаТаблицы;
		НовыйЭлемент.height		= ВысотаТаблицы;
		
		СформироватьСтрокиРеквизитовВXML(ЗаписьXML,
			ИдентификаторЭлемента, ТаблицаЭлементов, СтрокаМетаданных, Координаты.X);
		
		ИтераторТаблицТекущейСтроки = ИтераторТаблицТекущейСтроки + 1;
		
		Если ИтераторТаблицТекущейСтроки > КоличествоТаблицВСтрокеСетки Тогда
			
			ИтераторТаблицТекущейСтроки = 1;
			ИтераторСтрокВСетке = ИтераторСтрокВСетке + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтрокиРеквизитовВXML(ЗаписьXML,
	ИдентификаторЭлемента, ТаблицаЭлементов, СтрокаМетаданных, КоординатаXМетаданных)
	
	ИдентификаторРодителя = ИдентификаторЭлемента;
	
	ПрошлыйРеквизит = Неопределено;
	
	ВыбранныеСтроки = СтрокаМетаданных.Строки.НайтиСтроки(Новый Структура("Выбран", Истина));
	
	Для Каждого СтрокаРеквизитов Из ВыбранныеСтроки Цикл
		
		// Контейнер строки
		
		ПервыйПослеКлючевых = ЗначениеЗаполнено(ПрошлыйРеквизит)
			И ПрошлыйРеквизит.КлючевойРеквизит И Не СтрокаРеквизитов.КлючевойРеквизит;
		
		ЭтоТабличнаяЧасть = СтрокаРеквизитов.ЭтоТЧ;
		
		ИдентификаторЭлемента = ИдентификаторЭлемента + 1;
		СтрокаПоследнегоЭлемента = ТаблицаЭлементов[ТаблицаЭлементов.Количество() - 1];
		КоординатаX = КоординатаXМетаданных;
		КоординатаY = СтрокаПоследнегоЭлемента.y + ВысотаСтрок;
		
		Стиль = ПолучитьСтильВЗависимостиОтФигурыЭлемента("partialRectangleContainer");
		Если ПервыйПослеКлючевых Тогда
			Стиль = СтрЗаменить(Стиль, "top=0", "top=1");
			Стиль = СтрЗаменить(Стиль, "fillColor=none", "fillColor=#e6f4ff");
		ИначеЕсли ЭтоТабличнаяЧасть Тогда
			Стиль = СтрЗаменить(Стиль, "fillColor=none", "fillColor=#99ccff");
			Стиль = СтрЗаменить(Стиль, "top=0", "top=1");
			Стиль = СтрЗаменить(Стиль, "bottom=0", "bottom=1");
			Стиль = Стиль + "dashed=1;";
			Стиль = Стиль + "strokeColor=#6c8ebf;";
		Иначе
			Стиль = СтрЗаменить(Стиль, "fillColor=none", "fillColor=#e6f4ff");
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("mxCell");
		ЗаписьXML.ЗаписатьАтрибут("id"		, Строка(ИдентификаторЭлемента));
		ЗаписьXML.ЗаписатьАтрибут("value"	, "");
		ЗаписьXML.ЗаписатьАтрибут("style"	, Стиль);
		ЗаписьXML.ЗаписатьАтрибут("vertex"	, "1");
		ЗаписьXML.ЗаписатьАтрибут("parent"	, Строка(ИдентификаторРодителя));
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("mxGeometry");
		ЗаписьXML.ЗаписатьАтрибут("y"	, Строка(КоординатаY));
		ЗаписьXML.ЗаписатьАтрибут("width"	, Строка(ШиринаТаблицы));
		ЗаписьXML.ЗаписатьАтрибут("height"	, Строка(ВысотаСтрок));
		ЗаписьXML.ЗаписатьАтрибут("as"		, "geometry");
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // mxCell
		
		НовыйЭлемент = ТаблицаЭлементов.Добавить();
		НовыйЭлемент.id		= ИдентификаторЭлемента;
		НовыйЭлемент.parent	= ИдентификаторРодителя;
		НовыйЭлемент.shape	= "partialRectangleContainer";
		НовыйЭлемент.path	= СтрокаРеквизитов.Путь;
		НовыйЭлемент.type	= СтрокаРеквизитов.ТипЗначения;
		НовыйЭлемент.x		= КоординатаX;
		НовыйЭлемент.y		= КоординатаY;
		НовыйЭлемент.width	= ШиринаТаблицы;
		НовыйЭлемент.height	= ВысотаСтрок;
		
		ТипСтиляФигуры = ?(СтрокаРеквизитов.КлючевойРеквизит, "Important", "Usual");
		ИдентификаторКонтейнера = ИдентификаторЭлемента;
		
		// Поле свойства
		
		ИдентификаторЭлемента = ИдентификаторЭлемента + 1;
		СтрокаПоследнегоЭлемента = ТаблицаЭлементов[ТаблицаЭлементов.Количество() - 1];
		КоординатаX = КоординатаXМетаданных;
		КоординатаY = СтрокаПоследнегоЭлемента.y;
		ПредставлениеСвойства = ПолучитьПредставлениеСвойства(СтрокаРеквизитов);
		
		Стиль = ПолучитьСтильВЗависимостиОтФигурыЭлемента("partialRectangleType" + ТипСтиляФигуры);
		Если ПервыйПослеКлючевых Тогда
			Стиль = СтрЗаменить(Стиль, "top=0", "top=1");
			Стиль = СтрЗаменить(Стиль, "fillColor=none", "fillColor=#e6f4ff");
		ИначеЕсли ЭтоТабличнаяЧасть Тогда
			Стиль = СтрЗаменить(Стиль, "top=0", "top=1");
			Стиль = СтрЗаменить(Стиль, "bottom=0", "bottom=1");
			Стиль = Стиль + "dashed=1;";
		Иначе
			Стиль = СтрЗаменить(Стиль, "fillColor=none", "fillColor=#e6f4ff");
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("mxCell");
		ЗаписьXML.ЗаписатьАтрибут("id"		, Строка(ИдентификаторЭлемента));
		ЗаписьXML.ЗаписатьАтрибут("value"	, ПредставлениеСвойства);
		ЗаписьXML.ЗаписатьАтрибут("style"	, Стиль);
		ЗаписьXML.ЗаписатьАтрибут("vertex"	, "1");
		ЗаписьXML.ЗаписатьАтрибут("parent"	, Строка(ИдентификаторКонтейнера));
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("mxGeometry");
		ЗаписьXML.ЗаписатьАтрибут("width"	, Строка(ШиринаПоляСвойство));
		ЗаписьXML.ЗаписатьАтрибут("height"	, Строка(ВысотаСтрок));
		ЗаписьXML.ЗаписатьАтрибут("as"		, "geometry");
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // mxCell
		
		НовыйЭлемент = ТаблицаЭлементов.Добавить();
		НовыйЭлемент.id		= ИдентификаторЭлемента;
		НовыйЭлемент.parent	= ИдентификаторРодителя;
		НовыйЭлемент.container	= ИдентификаторКонтейнера;
		НовыйЭлемент.shape	= "partialRectangleType" + ТипСтиляФигуры;
		НовыйЭлемент.path	= СтрокаРеквизитов.Путь;
		НовыйЭлемент.type	= СтрокаРеквизитов.ТипЗначения;
		НовыйЭлемент.x		= КоординатаX;
		НовыйЭлемент.y		= КоординатаY;
		НовыйЭлемент.width	= ШиринаПоляСвойство;
		НовыйЭлемент.height	= ВысотаСтрок;
		
		// Поле описания
		
		ИдентификаторЭлемента = ИдентификаторЭлемента + 1;
		СтрокаПоследнегоЭлемента = ТаблицаЭлементов[ТаблицаЭлементов.Количество() - 1];
		КоординатаX = КоординатаXМетаданных + ШиринаПоляСвойство;
		КоординатаY = СтрокаПоследнегоЭлемента.y;
		
		Стиль = ПолучитьСтильВЗависимостиОтФигурыЭлемента("partialRectangleDesc" + ТипСтиляФигуры);
		Если ПервыйПослеКлючевых Тогда
			Стиль = СтрЗаменить(Стиль, "top=0", "top=1");
			Стиль = СтрЗаменить(Стиль, "fillColor=none", "fillColor=#e6f4ff");
		ИначеЕсли ЭтоТабличнаяЧасть Тогда
			Стиль = СтрЗаменить(Стиль, "top=0", "top=1");
			Стиль = СтрЗаменить(Стиль, "bottom=0", "bottom=1");
			Стиль = Стиль + "dashed=1;";
		Иначе
			Стиль = СтрЗаменить(Стиль, "fillColor=none", "fillColor=#e6f4ff");
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("mxCell");
		ЗаписьXML.ЗаписатьАтрибут("id"		, Строка(ИдентификаторЭлемента));
		ЗаписьXML.ЗаписатьАтрибут("value"	, СтрокаРеквизитов.Имя);
		ЗаписьXML.ЗаписатьАтрибут("style"	, Стиль);
		ЗаписьXML.ЗаписатьАтрибут("vertex"	, "1");
		ЗаписьXML.ЗаписатьАтрибут("parent"	, Строка(ИдентификаторКонтейнера));
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("mxGeometry");
		ЗаписьXML.ЗаписатьАтрибут("x"	, Строка(КоординатаX));
		ЗаписьXML.ЗаписатьАтрибут("width"	, Строка(ШиринаПоляОписание));
		ЗаписьXML.ЗаписатьАтрибут("height"	, Строка(ВысотаСтрок));
		ЗаписьXML.ЗаписатьАтрибут("as"		, "geometry");
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // mxCell
		
		НовыйЭлемент = ТаблицаЭлементов.Добавить();
		НовыйЭлемент.id		= ИдентификаторЭлемента;
		НовыйЭлемент.parent	= ИдентификаторРодителя;
		НовыйЭлемент.container	= ИдентификаторКонтейнера;
		НовыйЭлемент.shape	= "partialRectangleDesc" + ТипСтиляФигуры;
		НовыйЭлемент.path	= СтрокаРеквизитов.Путь;
		НовыйЭлемент.type	= СтрокаРеквизитов.ТипЗначения;
		НовыйЭлемент.x		= КоординатаX;
		НовыйЭлемент.y		= КоординатаY;
		НовыйЭлемент.width	= ШиринаПоляОписание;
		НовыйЭлемент.height	= ВысотаСтрок;
		
		ПрошлыйРеквизит = СтрокаРеквизитов;
		
		Если ЭтоТабличнаяЧасть Тогда
			
			СформироватьСтрокиРеквизитовТабЧастиВXML(ЗаписьXML, ИдентификаторЭлемента,
				ТаблицаЭлементов, СтрокаРеквизитов, КоординатаX, ПервыйПослеКлючевых, ИдентификаторРодителя);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтрокиРеквизитовТабЧастиВXML(ЗаписьXML, ИдентификаторЭлемента,
	ТаблицаЭлементов, ТабличнаяЧасть, КоординатаXТЧ, ПервыйПослеКлючевых, ИдентификаторРодителя)
	
	КоличествоСтрок = ТабличнаяЧасть.Строки.Количество() - 1;
	
	Для Инкремент = 0 По КоличествоСтрок Цикл
		
		ПоследняяСтрока = Инкремент = КоличествоСтрок;
		
		СтрокаРеквизитаТаблЧасти = ТабличнаяЧасть.Строки[Инкремент];
		
		Если Не СтрокаРеквизитаТаблЧасти.Выбран Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторЭлемента = ИдентификаторЭлемента + 1;
		СтрокаПоследнегоЭлемента = ТаблицаЭлементов[ТаблицаЭлементов.Количество() - 1];
		КоординатаX = КоординатаXТЧ;
		КоординатаY = СтрокаПоследнегоЭлемента.y + ВысотаСтрок;
		
		Стиль = ПолучитьСтильВЗависимостиОтФигурыЭлемента("partialRectangleContainer");
		Стиль = СтрЗаменить(Стиль, "fillColor=none", "fillColor=#cce5ff");
		Стиль = Стиль + "strokeColor=#99ccff;";
		//Если ПоследняяСтрока Тогда
		//	Стиль = СтрЗаменить(Стиль, "bottom=0", "bottom=1");
		//	Стиль = Стиль + "dashed=1;";
		//КонецЕсли;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("mxCell");
		ЗаписьXML.ЗаписатьАтрибут("id"		, Строка(ИдентификаторЭлемента));
		ЗаписьXML.ЗаписатьАтрибут("value"	, "");
		ЗаписьXML.ЗаписатьАтрибут("style"	, Стиль);
		ЗаписьXML.ЗаписатьАтрибут("vertex"	, "1");
		ЗаписьXML.ЗаписатьАтрибут("parent"	, Строка(ИдентификаторРодителя));
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("mxGeometry");
		ЗаписьXML.ЗаписатьАтрибут("y"	, Строка(КоординатаY));
		ЗаписьXML.ЗаписатьАтрибут("width"	, Строка(ШиринаТаблицы));
		ЗаписьXML.ЗаписатьАтрибут("height"	, Строка(ВысотаСтрок));
		ЗаписьXML.ЗаписатьАтрибут("as"		, "geometry");
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // mxCell
		
		НовыйЭлемент = ТаблицаЭлементов.Добавить();
		НовыйЭлемент.id		= ИдентификаторЭлемента;
		НовыйЭлемент.parent	= ИдентификаторРодителя;
		НовыйЭлемент.shape	= "partialRectangleContainer";
		НовыйЭлемент.path	= СтрокаРеквизитаТаблЧасти.Путь;
		НовыйЭлемент.type	= СтрокаРеквизитаТаблЧасти.ТипЗначения;
		НовыйЭлемент.x		= КоординатаX;
		НовыйЭлемент.y		= КоординатаY;
		НовыйЭлемент.width	= ШиринаТаблицы;
		НовыйЭлемент.height	= ВысотаСтрок;
		
		ИдентификаторКонтейнера = ИдентификаторЭлемента;
		
		// Поле свойства
		
		ИдентификаторЭлемента = ИдентификаторЭлемента + 1;
		СтрокаПоследнегоЭлемента = ТаблицаЭлементов[ТаблицаЭлементов.Количество() - 1];
		КоординатаX = КоординатаXТЧ;
		КоординатаY = СтрокаПоследнегоЭлемента.y;
		ПредставлениеСвойства = ПолучитьПредставлениеСвойства(СтрокаРеквизитаТаблЧасти);
		
		Стиль = ПолучитьСтильВЗависимостиОтФигурыЭлемента("partialRectangleTypeUsual");
		//Если ПоследняяСтрока Тогда
		//	Стиль = СтрЗаменить(Стиль, "bottom=0", "bottom=1");
		//	Стиль = Стиль + "dashed=1;";
		//КонецЕсли;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("mxCell");
		ЗаписьXML.ЗаписатьАтрибут("id"		, Строка(ИдентификаторЭлемента));
		ЗаписьXML.ЗаписатьАтрибут("value"	, ПредставлениеСвойства);
		ЗаписьXML.ЗаписатьАтрибут("style"	, Стиль);
		ЗаписьXML.ЗаписатьАтрибут("vertex"	, "1");
		ЗаписьXML.ЗаписатьАтрибут("parent"	, Строка(ИдентификаторКонтейнера));
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("mxGeometry");
		ЗаписьXML.ЗаписатьАтрибут("width"	, Строка(ШиринаПоляСвойство));
		ЗаписьXML.ЗаписатьАтрибут("height"	, Строка(ВысотаСтрок));
		ЗаписьXML.ЗаписатьАтрибут("as"		, "geometry");
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // mxCell
		
		НовыйЭлемент = ТаблицаЭлементов.Добавить();
		НовыйЭлемент.id		= ИдентификаторЭлемента;
		НовыйЭлемент.parent	= ИдентификаторРодителя;
		НовыйЭлемент.container	= ИдентификаторКонтейнера;
		НовыйЭлемент.shape	= "partialRectangleTypeUsual";
		НовыйЭлемент.path	= СтрокаРеквизитаТаблЧасти.Путь;
		НовыйЭлемент.type	= СтрокаРеквизитаТаблЧасти.ТипЗначения;
		НовыйЭлемент.x		= КоординатаX;
		НовыйЭлемент.y		= КоординатаY;
		НовыйЭлемент.width	= ШиринаПоляСвойство;
		НовыйЭлемент.height	= ВысотаСтрок;
		
		// Поле описания
		
		ИдентификаторЭлемента = ИдентификаторЭлемента + 1;
		СтрокаПоследнегоЭлемента = ТаблицаЭлементов[ТаблицаЭлементов.Количество() - 1];
		КоординатаX = КоординатаXТЧ + ШиринаПоляСвойство;
		КоординатаY = СтрокаПоследнегоЭлемента.y;
		
		Стиль = ПолучитьСтильВЗависимостиОтФигурыЭлемента("partialRectangleDescUsual");
		Стиль = СтрЗаменить(Стиль, "spacingLeft=6", "spacingLeft=30");
		//Если ПоследняяСтрока Тогда
		//	Стиль = СтрЗаменить(Стиль, "bottom=0", "bottom=1");
		//	Стиль = Стиль + "dashed=1;";
		//КонецЕсли;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("mxCell");
		ЗаписьXML.ЗаписатьАтрибут("id"		, Строка(ИдентификаторЭлемента));
		ЗаписьXML.ЗаписатьАтрибут("value"	, СтрокаРеквизитаТаблЧасти.Имя);
		ЗаписьXML.ЗаписатьАтрибут("style"	, Стиль);
		ЗаписьXML.ЗаписатьАтрибут("vertex"	, "1");
		ЗаписьXML.ЗаписатьАтрибут("parent"	, Строка(ИдентификаторКонтейнера));
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("mxGeometry");
		ЗаписьXML.ЗаписатьАтрибут("x"	, Строка(КоординатаX));
		ЗаписьXML.ЗаписатьАтрибут("width"	, Строка(ШиринаПоляОписание));
		ЗаписьXML.ЗаписатьАтрибут("height"	, Строка(ВысотаСтрок));
		ЗаписьXML.ЗаписатьАтрибут("as"		, "geometry");
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // mxCell
		
		НовыйЭлемент = ТаблицаЭлементов.Добавить();
		НовыйЭлемент.id		= ИдентификаторЭлемента;
		НовыйЭлемент.parent	= ИдентификаторРодителя;
		НовыйЭлемент.container	= ИдентификаторКонтейнера;
		НовыйЭлемент.shape	= "partialRectangleDescUsual";
		НовыйЭлемент.path	= СтрокаРеквизитаТаблЧасти.Путь;
		НовыйЭлемент.type	= СтрокаРеквизитаТаблЧасти.ТипЗначения;
		НовыйЭлемент.x		= КоординатаX;
		НовыйЭлемент.y		= КоординатаY;
		НовыйЭлемент.width	= ШиринаПоляОписание;
		НовыйЭлемент.height	= ВысотаСтрок;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСвязиМетаданныхДляРеквизитовВXML(ЗаписьXML,
	ИдентификаторЭлемента, ТаблицаЭлементов, РодительскаяСтрока)
	
	Если ПоказатьСвязиТолькоДля И ЗначениеЗаполнено(ТипВыводимыхМетаданных) Тогда
		ВыбранныеСтроки = РодительскаяСтрока.Строки.НайтиСтроки(Новый Структура("Путь", ТипВыводимыхМетаданных));
	Иначе
		ВыбранныеСтроки = РодительскаяСтрока.Строки.НайтиСтроки(Новый Структура("Выбран", Истина));
	КонецЕсли;
	
	Для Каждого СтрокаМетаданных Из ВыбранныеСтроки Цикл
		
		ВыбранныеСтрокиРеквизитов = СтрокаМетаданных.Строки.НайтиСтроки(Новый Структура("Выбран", Истина));
		
		Для Каждого СтрокаРеквизитов Из ВыбранныеСтрокиРеквизитов Цикл
			
			Если СтрокаМетаданных.ТипЗначения = СтрокаРеквизитов.ТипЗначения Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаРеквизитов.ПримитивныйТип Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаРеквизитов.ЭтоТЧ Тогда
				
				ВыбранныеСтрокиРеквизитовТЧ = СтрокаРеквизитов.Строки.НайтиСтроки(Новый Структура("Выбран", Истина));
					
				Для Каждого РеквизитТабличнойЧасти Из ВыбранныеСтрокиРеквизитовТЧ Цикл
					
					Если РеквизитТабличнойЧасти.ПримитивныйТип Тогда
						Продолжить;
					КонецЕсли;
					
					ЗаписатьСвязьПоТипуОбъектаВXML(ЗаписьXML,
						ИдентификаторЭлемента, ТаблицаЭлементов, РеквизитТабличнойЧасти, РеквизитТабличнойЧасти.Путь);
					
				КонецЦикла;
				
			Иначе
				
				ЗаписатьСвязьПоТипуОбъектаВXML(ЗаписьXML,
					ИдентификаторЭлемента, ТаблицаЭлементов, СтрокаРеквизитов, СтрокаРеквизитов.Путь);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСвязьПоТипуОбъектаВXML(ЗаписьXML,
	ИдентификаторЭлемента, ТаблицаЭлементов, СтрокаРеквизитов, ПолныйПутьКРеквизиту)
	
	СтруктураОтбораКонтейнера = Новый Структура;
	СтруктураОтбораКонтейнера.Вставить("path"	, ПолныйПутьКРеквизиту);
	СтруктураОтбораКонтейнера.Вставить("shape"	, "partialRectangleContainer");
	ВыведенныйКонтейнерСтроки = ТаблицаЭлементов.НайтиСтроки(СтруктураОтбораКонтейнера);
	
	Если ВыведенныйКонтейнерСтроки.Количество() Тогда
		ЭлементКонтейнер = ВыведенныйКонтейнерСтроки[0];
	Иначе
		Возврат;
	КонецЕсли;
	
	ТипыРеквизитов = СтрокаРеквизитов.ТипЗначения.Типы();
	
	Для Каждого ТипПеречисление Из ТипыРеквизитов Цикл
		
		ИдентификаторЭлемента = ИдентификаторЭлемента + 1;
		
		СтруктураОтбораТаблицы = Новый Структура;
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипПеречисление);
		СтруктураОтбораТаблицы.Вставить("type"	, Новый ОписаниеТипов(МассивТипов));
		СтруктураОтбораТаблицы.Вставить("shape"	, "table");
		ВыведенныйТаблицаСтроки = ТаблицаЭлементов.НайтиСтроки(СтруктураОтбораТаблицы);
		
		Если ВыведенныйТаблицаСтроки.Количество() Тогда
			ЭлементТаблица = ВыведенныйТаблицаСтроки[0];
		Иначе
			Возврат;
		КонецЕсли;
		
		СтильСвязей = ПолучитьСтильВЗависимостиОтФигурыЭлемента("entityRelationEdgeStyle");
		
		КоординатыИсточника = Новый Структура;
		КоординатыПриемника = Новый Структура;
		КоординатыТочек = Новый Массив;
		КоординатыТочек.Добавить(Новый Структура);
		КоординатыТочек.Добавить(Новый Структура);
		
		Если ЭлементКонтейнер.x = ЭлементТаблица.x Тогда
			КоординатыИсточника.Вставить("x", ЭлементКонтейнер.x);
			КоординатыПриемника.Вставить("x", ЭлементТаблица.x);
			
			СтильСвязей = СтрЗаменить(СтильСвязей, "exitX=1", "exitX=0");
			
		ИначеЕсли ЭлементКонтейнер.x > ЭлементТаблица.x Тогда
			КоординатыИсточника.Вставить("x", ЭлементКонтейнер.x);
			КоординатыПриемника.Вставить("x", ЭлементТаблица.x + ШиринаТаблицы);
			СтильСвязей = СтрЗаменить(СтильСвязей, "exitX=1", "exitX=0");
			
		Иначе
			КоординатыИсточника.Вставить("x", ЭлементКонтейнер.x + ШиринаТаблицы);
			КоординатыПриемника.Вставить("x", ЭлементТаблица.x);
			
		КонецЕсли;
		
		YИсточникаСВысотойСтрок = ЭлементКонтейнер.y + (ВысотаСтрок / 2);
		YПриемникаСВысотойСтрок = ЭлементТаблица.y + (ВысотаСтрок / 2);
		КоординатыИсточника.Вставить("y", YИсточникаСВысотойСтрок);
		КоординатыПриемника.Вставить("y", YПриемникаСВысотойСтрок);
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("mxCell");
		ЗаписьXML.ЗаписатьАтрибут("id"		, Строка(ИдентификаторЭлемента));
		ЗаписьXML.ЗаписатьАтрибут("value"	, "");
		ЗаписьXML.ЗаписатьАтрибут("style"	, СтильСвязей);
		ЗаписьXML.ЗаписатьАтрибут("edge"	, "1");
		ЗаписьXML.ЗаписатьАтрибут("parent"	, "1");
		ЗаписьXML.ЗаписатьАтрибут("source"	, Строка(ЭлементКонтейнер.id));
		ЗаписьXML.ЗаписатьАтрибут("target"	, Строка(ЭлементТаблица.id));
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("mxGeometry");
		ЗаписьXML.ЗаписатьАтрибут("width"	, "100");
		ЗаписьXML.ЗаписатьАтрибут("height"	, "100");
		ЗаписьXML.ЗаписатьАтрибут("relative", "1");
		ЗаписьXML.ЗаписатьАтрибут("as"		, "geometry");
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("mxPoint");
		ЗаписьXML.ЗаписатьАтрибут("x"	, Строка(КоординатыИсточника.x));
		ЗаписьXML.ЗаписатьАтрибут("y"	, Строка(КоординатыИсточника.y));
		ЗаписьXML.ЗаписатьАтрибут("as"	, "sourcePoint");
		ЗаписьXML.ЗаписатьКонецЭлемента(); // mxPoint
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("mxPoint");
		ЗаписьXML.ЗаписатьАтрибут("x"	, Строка(КоординатыПриемника.x));
		ЗаписьXML.ЗаписатьАтрибут("y"	, Строка(КоординатыПриемника.y));
		ЗаписьXML.ЗаписатьАтрибут("as"	, "targetPoint");
		ЗаписьXML.ЗаписатьКонецЭлемента(); // mxPoint
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // mxGeometry
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // mxCell
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // РаботаСXML

#Область Прочее

&НаСервере
Функция ПодготовитьТаблицуДляПоказаСвязейОдногоЭлементаМетаданных(ОбъектМетаданных, ИмяРодителя)
	
	ТаблицаМетаданных = Новый ТаблицаЗначений;
	ТаблицаМетаданных.Колонки.Добавить("Владелец");
	ТаблицаМетаданных.Колонки.Добавить("Имя");
	
	Для Каждого СтандартныйРеквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
		
		Если ПроверитьНеобходимВыводКлючевогоРеквизита(ИмяРодителя, ОбъектМетаданных, СтандартныйРеквизит.Имя)
			И Не ПроверитьЭтоПримитивныйТип(СтандартныйРеквизит.Тип) Тогда
			
			ТипыРеквизита = СтандартныйРеквизит.Тип.Типы();
			
			Для Каждого ТипРеквизита Из ТипыРеквизита Цикл
				
				НайденныеМетаданные = Метаданные.НайтиПоТипу(ТипРеквизита);
				
				Если НайденныеМетаданные = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ИмяМетаданныхНайденногоТипа = НайденныеМетаданные.ПолноеИмя();
				
				МассивРазделительТочка = СтрРазделить(ИмяМетаданныхНайденногоТипа, ".");
				
				НоваяСтрока = ТаблицаМетаданных.Добавить();
				НоваяСтрока.Владелец	= ПреобразоватьИмяМетаданныхИзЕдЧислаВМнож(МассивРазделительТочка[0]);
				НоваяСтрока.Имя			= МассивРазделительТочка[1];
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого РеквизитОбъекта Из ОбъектМетаданных.Реквизиты Цикл
		
		Если ПроверитьЭтоПримитивныйТип(РеквизитОбъекта.Тип) Тогда
			Продолжить;
		КонецЕсли;
		
		ТипыРеквизита = РеквизитОбъекта.Тип.Типы();
		
		Для Каждого ТипРеквизита Из ТипыРеквизита Цикл
			
			НайденныеМетаданные = Метаданные.НайтиПоТипу(ТипРеквизита);
			
			Если НайденныеМетаданные = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяМетаданныхНайденногоТипа = НайденныеМетаданные.ПолноеИмя();
			
			МассивРазделительТочка = СтрРазделить(ИмяМетаданныхНайденногоТипа, ".");
			
			НоваяСтрока = ТаблицаМетаданных.Добавить();
			НоваяСтрока.Владелец	= ПреобразоватьИмяМетаданныхИзЕдЧислаВМнож(МассивРазделительТочка[0]);
			НоваяСтрока.Имя			= МассивРазделительТочка[1];
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
		
		Для Каждого РеквизитТабличнойЧасти Из ТабличнаяЧасть.Реквизиты Цикл
			
			Если ПроверитьЭтоПримитивныйТип(РеквизитТабличнойЧасти.Тип) Тогда
				Продолжить;
			КонецЕсли;
			
			ТипыРеквизита = РеквизитТабличнойЧасти.Тип.Типы();
			
			Для Каждого ТипРеквизита Из ТипыРеквизита Цикл
				
				НайденныеМетаданные = Метаданные.НайтиПоТипу(ТипРеквизита);
				
				Если НайденныеМетаданные = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ИмяМетаданныхНайденногоТипа = НайденныеМетаданные.ПолноеИмя();
				
				МассивРазделительТочка = СтрРазделить(ИмяМетаданныхНайденногоТипа, ".");
				
				НоваяСтрока = ТаблицаМетаданных.Добавить();
				НоваяСтрока.Владелец	= ПреобразоватьИмяМетаданныхИзЕдЧислаВМнож(МассивРазделительТочка[0]);
				НоваяСтрока.Имя			= МассивРазделительТочка[1];
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаМетаданных;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьЭтоПримитивныйТип(ОписаниеТипа)
	
	Если ОписаниеТипа.Типы().Количество() > 1 Тогда
		ЭтоПримитивныйТип = Ложь;
	ИначеЕсли ОписаниеТипа.СодержитТип(Тип("Булево")) Тогда
		ЭтоПримитивныйТип = Истина;
	ИначеЕсли ОписаниеТипа.СодержитТип(Тип("Число")) Тогда
		ЭтоПримитивныйТип = Истина;
	ИначеЕсли ОписаниеТипа.СодержитТип(Тип("Строка")) Тогда
		ЭтоПримитивныйТип = Истина;
	ИначеЕсли ОписаниеТипа.СодержитТип(Тип("Дата")) Тогда
		ЭтоПримитивныйТип = Истина;
	ИначеЕсли ОписаниеТипа.СодержитТип(Тип("ХранилищеЗначения")) Тогда
		ЭтоПримитивныйТип = Истина;
	ИначеЕсли ОписаниеТипа.СодержитТип(Тип("УникальныйИдентификатор")) Тогда
		ЭтоПримитивныйТип = Истина;
	Иначе
		ЭтоПримитивныйТип = Ложь;
	КонецЕсли;
	
	Возврат ЭтоПримитивныйТип;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьНеобходимВыводКлючевогоРеквизита(ИмяРодителя, ОбъектМетаданных, ИмяРеквизита)
	
	Выводить = Ложь;
	
	Если ИмяРодителя = "Справочники"
		И (ИмяРеквизита = "Наименование"
		Или ИмяРеквизита = "Родитель"
		Или ИмяРеквизита = "Код"
		Или ИмяРеквизита = "Владельцы") Тогда
		
		Выводить = Истина;
		
	ИначеЕсли ИмяРодителя = "Документы" Тогда
		
		
		
	КонецЕсли;
	
	Возврат Выводить;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПреобразоватьИмяМетаданныхИзЕдЧислаВМнож(ИмяМетаданных)
	
	Представление = "";
	
	Если ИмяМетаданных = "Справочник" Тогда
		Представление = "Справочники";
	ИначеЕсли ИмяМетаданных = "Документ" Тогда
		Представление = "Документы";
	ИначеЕсли ИмяМетаданных = "РегистрСведений" Тогда
		Представление = "РегистрыСведений";
	ИначеЕсли ИмяМетаданных = "РегистрНакопления" Тогда
		Представление = "РегистрыНакоплений";
	ИначеЕсли ИмяМетаданных = "Перечисление" Тогда
		Представление = "Перечисления";
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДатуВМиллисекундах(ВхДата)
	
	Возврат Формат(ВхДата, "ДФ=yyyy-MM-ddTHH:mm:ss.000Z");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтильВЗависимостиОтФигурыЭлемента(ФигураЭлемента)
	
	СтильСтрокой = "";
	
	Если ФигураЭлемента = "table" Тогда
		СтильСтрокой = "shape=table;startSize=30;container=1;collapsible=1;childLayout=tableLayout;fixedRows=1;rowLines=0;fontStyle=1;align=center;resizeLast=1;";
		
	ИначеЕсли ФигураЭлемента = "partialRectangleContainer" Тогда
		СтильСтрокой = "shape=partialRectangle;collapsible=0;dropTarget=0;pointerEvents=0;fillColor=none;top=0;left=0;bottom=0;right=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;";
		
	ИначеЕсли ФигураЭлемента = "partialRectangleTypeImportant" Тогда
		СтильСтрокой = "shape=partialRectangle;connectable=0;fillColor=none;top=0;left=0;bottom=0;right=0;fontStyle=1;overflow=hidden;";
		
	ИначеЕсли ФигураЭлемента = "partialRectangleDescImportant" Тогда
		СтильСтрокой = "shape=partialRectangle;connectable=0;fillColor=none;top=0;left=0;bottom=0;right=0;align=left;spacingLeft=6;fontStyle=5;overflow=hidden;";
		
	ИначеЕсли ФигураЭлемента = "partialRectangleTypeUsual" Тогда
		СтильСтрокой = "shape=partialRectangle;connectable=0;fillColor=none;top=0;left=0;bottom=0;right=0;editable=1;overflow=hidden;";
		
	ИначеЕсли ФигураЭлемента = "partialRectangleDescUsual" Тогда
		СтильСтрокой = "shape=partialRectangle;connectable=0;fillColor=none;top=0;left=0;bottom=0;right=0;align=left;spacingLeft=6;overflow=hidden;";
		
	ИначеЕсли ФигураЭлемента = "entityRelationEdgeStyle" Тогда
		СтильСтрокой = "edgeStyle=orthogonalEdgeStyle;fontSize=12;html=1;endArrow=classic;endFill=1;shadow=0;targetPerimeterSpacing=0;strokeWidth=1;opacity=40;entryX=0;entryY=0.015;entryDx=0;entryDy=0;entryPerimeter=0;exitX=1;exitY=0.5;exitDx=0;exitDy=0;startArrow=oval;startFill=1;curved=1;";
		
	КонецЕсли;
	
	Возврат СтильСтрокой;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСвойства(СтрокаРеквизитов)
	
	Если СтрокаРеквизитов.КлючевойРеквизит Тогда
		Представление = "PK";
	ИначеЕсли Не СтрокаРеквизитов.ПримитивныйТип И СтрокаРеквизитов.ПроверкаЗаполнения Тогда
		Представление = "FK,NN";
	ИначеЕсли Не СтрокаРеквизитов.ПримитивныйТип И Не СтрокаРеквизитов.ПроверкаЗаполнения Тогда
		Представление = "FK";
	ИначеЕсли СтрокаРеквизитов.ПримитивныйТип И СтрокаРеквизитов.ПроверкаЗаполнения Тогда
		Представление = "NN";
	Иначе
		Представление = "";
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаСервере
Функция СформироватьГоризонтальнуюСеткуРазметкиТаблиц()
	
	СеткаРазметки = Новый ТаблицаЗначений;
	СеткаРазметки.Колонки.Добавить("НомерТаблицы");
	СеткаРазметки.Колонки.Добавить("КоординатаX");
	
	КоординатаX = НачальнаяКоординатаX; // Для первой итерации это отступ слева
	
	ДоступнаяШирина = ШиринаСтраницы - КоординатаX;
	
	НомерТаблицы = 1;
	Пока ДоступнаяШирина > (КоординатаX + ШиринаТаблицы) Цикл
		
		ГоризонтальнаяЯчейка = СеткаРазметки.Добавить();
		ГоризонтальнаяЯчейка.НомерТаблицы	= НомерТаблицы;
		ГоризонтальнаяЯчейка.КоординатаX	= КоординатаX;
		
		КоординатаX = КоординатаX + ШиринаТаблицы + РасстояниеМеждуТаблицами;
		
		НомерТаблицы = НомерТаблицы + 1;
		
	КонецЦикла;
	
	Возврат СеткаРазметки;
	
КонецФункции

&НаСервере
Функция ПолучитьНовыеКоординатыТаблицыПоОрбите(ИдентификаторЭлемента,
	ТаблицаЭлементов, ИтераторТаблиц, ИтераторОрбиты, ВысотаТаблицы)
	
	СтруктураОтбора = Новый Структура;
	
	Если ИтераторОрбиты = 1 Тогда
		
		СтруктураОтбора.Вставить("inccol"	, 0);
		СтруктураОтбора.Вставить("incline"	, 0);
		
	Иначе
		
		СтруктураОтбора.Вставить("inccol"	, ИтераторОрбиты - 1);
		СтруктураОтбора.Вставить("incline"	, ИтераторТаблиц);
		
	КонецЕсли;
	
	ДанныеПрошлойТаблицыПоиск = ТаблицаЭлементов.НайтиСтроки(СтруктураОтбора);
	
	Если ДанныеПрошлойТаблицыПоиск.Количество() Тогда
		ДанныеПрошлойТаблицы = ДанныеПрошлойТаблицыПоиск[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИтераторТаблиц = 1 Тогда
		
		КоординатаX = ДанныеПрошлойТаблицы.x - РасстояниеМеждуТаблицами - ШиринаТаблицы;
		КоординатаY = ДанныеПрошлойТаблицы.y - РасстояниеМеждуТаблицами - ВысотаТаблицы;
		
	ИначеЕсли ИтераторТаблиц = 2 Тогда
		
		КоординатаX = ДанныеПрошлойТаблицы.x + ШиринаТаблицы + РасстояниеМеждуТаблицами;
		КоординатаY = ДанныеПрошлойТаблицы.y - РасстояниеМеждуТаблицами - ВысотаТаблицы;
		
	ИначеЕсли ИтераторТаблиц = 3 Тогда
		
		КоординатаX = ДанныеПрошлойТаблицы.x - РасстояниеМеждуТаблицами - ШиринаТаблицы;
		КоординатаY = ДанныеПрошлойТаблицы.y + ДанныеПрошлойТаблицы.height + РасстояниеМеждуТаблицами;
		
	ИначеЕсли ИтераторТаблиц = 4 Тогда
		
		КоординатаX = ДанныеПрошлойТаблицы.x + ШиринаТаблицы + РасстояниеМеждуТаблицами;
		КоординатаY = ДанныеПрошлойТаблицы.y + ДанныеПрошлойТаблицы.height + РасстояниеМеждуТаблицами;
		
	КонецЕсли;
	
	Координаты = Новый Структура;
	Координаты.Вставить("X", КоординатаX);
	Координаты.Вставить("Y", КоординатаY);
	
	Возврат Координаты;
	
КонецФункции

&НаСервере
Функция ПолучитьНовыеКоординатыТаблицыПоСетке(ИдентификаторЭлемента,
	ТаблицаЭлементов, СеткаРазметки, ИтераторТаблицТекущейСтроки, ИтераторСтрокВСетке)
	
	СтрокаРазметки = СеткаРазметки.Найти(ИтераторТаблицТекущейСтроки, "НомерТаблицы");
	
	Если ИтераторСтрокВСетке = 1 Тогда
		КоординатаY = НачальнаяКоординатаY;
	Иначе
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("incline"	, ИтераторСтрокВСетке - 1);
		СтруктураОтбора.Вставить("shape"	, "table");
		ТаблицыПрошлойСтроки = ТаблицаЭлементов.НайтиСтроки(СтруктураОтбора);
		КоординатаY = 0;
		
		Для Каждого СтрокаТаблица Из ТаблицыПрошлойСтроки Цикл
			
			КоординатаY = Макс(СтрокаТаблица.y + СтрокаТаблица.height, КоординатаY);
			
		КонецЦикла;
		
		КоординатаY = КоординатаY + РасстояниеМеждуТаблицами;
		
	КонецЕсли;
	
	Координаты = Новый Структура;
	Координаты.Вставить("X", СтрокаРазметки.КоординатаX);
	Координаты.Вставить("Y", КоординатаY);
	
	Возврат Координаты;
	
КонецФункции

#КонецОбласти // Прочие

#КонецОбласти // СлужебныеПроцедурыИФункции